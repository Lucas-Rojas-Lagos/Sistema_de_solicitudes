/////////////////////////////////////////////////////////////// PARÁMETROS E INICIALIZACIÓN ///////////////////////////////////////////////////////////////

// Dashboards de navegación
const idBandejaRevision = 6;
const idMisTicketsDashboard = 31;

// Datos del ticket/solicitud
const mensajeId = ZEN_CASE.id;
const nTicket = ZEN_DATABEAN.id;
const idUsuario = ZEN_CONNECT.user.id;
const motivo = ZEN_DATABEAN.motivo;
const nombreUsuario = ZEN_CONNECT.user.nombre;
const fechaCreacion = ZEN_DATABEAN.fecha_creacion;
const requiereAclarar = ZEN_DATABEAN.requiere_aclaracion;
const idUsuarioOriginador = ZEN_DATABEAN.id_usuario_originador;

let stepId = parseInt(ZEN_CASE.step_id);
let idAgente = idUsuario;
let descripcion = ZEN_DATABEAN.descripcion;

// Constantes REST
const queryEstadoTicket = 43;
const queryDatosContacto = 55;
const queryPrioridades = 56;
const queryGruposAgentes = 57;
const queryCrearNota = 58;
const queryCargarNotas = 59;
const queryAdjuntosNotas = 60;
const queryUltimosTicket = 61;
const queryCrearAdjuntoNota = 72;
const queryTipoTrabajo = 77;
const queryCambiarEstado = 89;
const queryEtapasTicket = 90;
const queryCrearSeguimiento = 91;
const querySeguimientos = 92;
const queryFirmaTicket = 186;
const queryObtenerFirmaTicket = 187;
const queryMailIdUsuario = 188;
const queryTareasPorTipo = 255;
const queryCamposTarea = 261;
const queryOpcionesCampo = 264;
const queryInsertarCampoTarea = 268;
const queryObtenerTicketBeanId = 269;
const queryCargarCampos = 270;
const queryRequiereFirma = 271;
const queryEmpresas = 273;
const queryCentrosCostos = 274;
const queryActualizarAprobador = 280;
const queryInsertarDistribucion = 283;
const queryDistribucionTarea = 284;
const querySolicitarAclaracion = 293;
const queryObtenerTicketPadre = 296;
const queryObtenerInstanciaPadre = 298;
const queryObtenerTicketsAclaracion = 299;
const queryFechaCriticidad = 301;
const queryNuevaFechaCriticidad = 302;
const queryValidarComprobante = 304;
const queryModificarFormaPago = 305;
const queryObtenerSocios = 309;
const queryCamposExtendidos = 310;
const queryRegistrarMontoAclarar = 311;
const queryObtenerMontosAclaracion = 312;
const queryObtenerDatosEdicion = 313;
const queryBorrarCampos = 314;
const queryBorrarDistribuciones = 315;
const queryActualizarFechaPago = 316;
const queryDiffAclaracion = 317;

// Inicialización del modo edición
const ticketEnEdicion = nTicket;
window.modoEdicion = false;
async function cargarDatosEdicion(nTicket) {
    const resp = await ZEN_QUERY({ id: queryObtenerDatosEdicion, parametros: { id_ticket: parseInt(nTicket) } });
    window.datosTicketEditado = resp.result;
}
cargarDatosEdicion(nTicket);

// Mapeo de roles del usuario
const obtenerRolUsuarioActivo = () => {
    const roles = ZEN_CONNECT.roles.map(r => r.role_id);

    const esAdministrador = roles.includes("1") || roles.includes("2");
    const esSolicitante = roles.includes("8") || esAdministrador;
    const esAutorizador = roles.includes("9") || esAdministrador;
    const esContabilidad = roles.includes("10") || esAdministrador;
    const esTesoreria = roles.includes("11") || esAdministrador;

    return {
        esAdministrador,
        esSolicitante,
        esAutorizador,
        esContabilidad,
        esTesoreria,
        esBackoffice: esContabilidad || esTesoreria || esAdministrador
    };
};

const rolesActivos = obtenerRolUsuarioActivo();

// Navegación según rol y etapa
document.getElementById('linkTickets').addEventListener('click', function () {
    const enRevision = stepId === 108 || stepId === 109;

    if (rolesActivos.esAutorizador && enRevision) {
        window.location.href = `https://zenflow.cl/${workspaceName}/station/console/${idBandejaRevision}`;
    } else if (rolesActivos.esSolicitante || idUsuario === ZEN_DATABEAN.id_usuario_originador) {
        window.location.href = `https://zenflow.cl/${workspaceName}/station/console/${idMisTicketsDashboard}`;
    } else {
        window.location.href = `https://zenflow.cl/${workspaceName}/station/console/${idBandejaRevision}`;
    }
});

async function mostrarAlertaAclaracion() {
    const alerta1 = document.getElementById('alertaAclaracion');
    const alerta2 = document.getElementById('alertaAclaracionAceptada');
    const alerta3 = document.getElementById('alertaAclaracionRechazada');
    const alertaDiferencia = document.getElementById('alertaDiferenciaAclaracion');

    [alerta1, alerta2, alerta3, alertaDiferencia].forEach(el => {
        if (el) el.style.display = 'none';
    });

    switch (parseInt(requiereAclarar, 10)) {
        case 1:
            if (alerta1) alerta1.style.display = 'block';
            break;
        case 2:
            if (alerta2) alerta2.style.display = 'block';
            break;
        case 3:
            if (alerta3) alerta3.style.display = 'block';
            break;
    }

    const resp = await ZEN_QUERY({
        id: queryDiffAclaracion,
        parametros: { id_ticket_aclaracion: parseInt(nTicket, 10) }
    });

    if (resp.result && resp.result.length > 0) {
        const { monto_original, monto_aclarado, diferencia } = resp.result[0];
        window.diferenciaMontoAclaracion = parseFloat(diferencia);
        window.montoAclarado = parseFloat(monto_original);
    } else {
        window.diferenciaMontoAclaracion = 0;
        window.montoAclarado = 0;
    }

    if (
        parseInt(ZEN_DATABEAN.id_tipo_trabajo, 10) === 33 &&
        window.diferenciaMontoAclaracion !== 0
    ) {
        if (alertaDiferencia) {
            alertaDiferencia.style.display = 'block';
        }
    }
}

// Evento: carga principal
document.addEventListener('DOMContentLoaded', async function () {

    flatpickr(".flatpickr-fecha", {
        dateFormat: "Y-m-d",
        locale: "es",
        allowInput: true
    });

    mostrarAlertaAclaracion();
    cargarMailSolicitante(ZEN_DATABEAN.id_usuario_originador);

    const columnaDetalles = document.getElementById('columnaDetalles');
    const toggleButton = document.getElementById('menuDetalles');
    if (columnaDetalles && toggleButton) {
        columnaDetalles.style.display = 'none';
        toggleButton.innerHTML = '<i class="fa fa-angle-left"></i> Ver detalles';
    }


    if (stepId === 108) {
        /*
        // Mostrar selector de firma si corresponde
        document.getElementById('selectorRequiereFirmaContainer').style.display = 'block';
        document.getElementById('selectorRequiereFirma').value = ZEN_DATABEAN.requiere_firma || '0';
        */
    }

    initializeCollapsibles();
    initializeToggleDetalles();
    fetchData(idUsuarioOriginador, stepId);
    fetchTipoTrabajo();

    setTimeout(() => {
        mostrarBotonesPorRolYEtapa();
    }, 0);


    if (/\[image: (.+?)\]/.test(descripcion)) {
        cargarAdjuntosTicket();
    } else {
        cargarAdjuntosTicket();
        datosTicket();
    }

    cargarNotas();
    cargarCamposPersonalizadosTicket();
    cargarUltimosTickets();
    cargarEtapasTicket();
    renderizarTicketsAclaracion();
    await cargarFechasCriticidad();
    gestionarCriticidadPorRolYEtapa();
    cargarTipoPagoVisual();

    const selectEstado = document.getElementById('estado');
    if (selectEstado) {
        selectEstado.disabled = true;
    }

    if (parseInt(ZEN_DATABEAN.requiere_firma) === 1) {
        document.getElementById('colFirmaContacto').style.display = 'block';
    }
});

/////////////////////////////////////////////////////////////// PARÁMETROS E INICIALIZACIÓN ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CONFIGURACIÓN DE BOTONERA ///////////////////////////////////////////////////////////////

async function mostrarBotonesPorRolYEtapa() {

    const {
        esSolicitante,
        esAutorizador,
        esContabilidad,
        esTesoreria
    } = rolesActivos;

    const botones = {
        enviarSolicitud: document.getElementById('btnEnviarSolicitud'),
        rechazar: document.getElementById('rechazar'),
        validar: document.getElementById('validar'),
        contabilizar: document.getElementById('btnContabilizar'),
        solicitarAclaracion: document.getElementById('btnSolicitarAclaracionContab'),
        adjuntarAclaracion: document.getElementById('adjuntarAclaracion'),
        rechazarContabilidad: document.getElementById('btnRechazarContabilidad'),
        programarPago: document.getElementById('btnProgramarPago'),
        confirmarTransferencia: document.getElementById('btnConfirmarTransferencia'),
        confirmarRecaudacion: document.getElementById('btnConfirmarRecaudacion'),
        rechazarTesoreria: document.getElementById('btnRechazarTesoreria'),
        aceptarAclaracion: document.getElementById('btnAceptarAclaracion'),
        rechazarAclaracion: document.getElementById('btnRechazarAclaracion'),
        pasarTesoreriaConDiferencia: document.getElementById('btnPasarTesoreriaConDiferencia'),
        cerrarSolicitud: document.getElementById('btnCerrarSolicitud')
    };

    Object.values(botones).forEach(btn => {
        if (btn) btn.style.display = 'none';
    });

    const tipoTrabajo = parseInt(ZEN_DATABEAN.id_tipo_trabajo);

    switch (parseInt(stepId)) {
        case 108: // Por enviar
            if (idUsuario === ZEN_DATABEAN.id_usuario_originador || esSolicitante)

                botones.enviarSolicitud.style.display = 'inline-block';
            break;

        case 109: // En revisión
            if (esAutorizador) {
                if (botones.validar) botones.validar.style.display = 'inline-block';
                if (botones.rechazar) botones.rechazar.style.display = 'inline-block';
            }
            break;

        case 110: // Por contabilizar
            if (esContabilidad) {
                if (tipoTrabajo === 33) {
                    const resp = await ZEN_QUERY({
                        id: queryDiffAclaracion,
                        parametros: { id_ticket_aclaracion: parseInt(nTicket) }
                    });

                    if (resp.result && resp.result.length > 0) {
                        const { diferencia } = resp.result[0];
                        window.diferenciaMontoAclaracion = parseFloat(diferencia);
                    } else {
                        window.diferenciaMontoAclaracion = 0;
                    }

                    if (botones.aceptarAclaracion) botones.aceptarAclaracion.style.display = 'inline-block';
                    if (botones.rechazarAclaracion) botones.rechazarAclaracion.style.display = 'inline-block';

                    if (window.diferenciaMontoAclaracion && parseFloat(window.diferenciaMontoAclaracion) !== 0) {
                        if (botones.pasarTesoreriaConDiferencia)
                            botones.pasarTesoreriaConDiferencia.style.display = 'inline-block';
                    }
                } else {
                    if (botones.contabilizar) botones.contabilizar.style.display = 'inline-block';
                    if (![32, 34].includes(tipoTrabajo) && botones.solicitarAclaracion)
                        botones.solicitarAclaracion.style.display = 'inline-block';
                    if (botones.rechazarContabilidad) botones.rechazarContabilidad.style.display = 'inline-block';
                }
            }
            break;

        case 111: // Contabilizado
            break;

        case 112: // Programación de pago pendiente
            if (esTesoreria && botones.programarPago && botones.rechazarTesoreria)
                botones.programarPago.style.display = 'inline-block';
                botones.rechazarTesoreria.style.display = 'inline-block';
            break;

        case 113: // Pago programado
            if (esTesoreria && botones.confirmarTransferencia)
                botones.confirmarTransferencia.style.display = 'inline-block';
            break;

        case 114: // Transferencia confirmada
            if (esTesoreria && botones.cerrarSolicitud)
                botones.cerrarSolicitud.style.display = 'inline-block';
            break;

        case 115: // Aclaración pendiente (ya no bloquea)
            if (esContabilidad) {
                if (botones.contabilizar) botones.contabilizar.style.display = 'inline-block';
                if (tipoTrabajo !== 34 && botones.solicitarAclaracion)
                    botones.solicitarAclaracion.style.display = 'inline-block';
                if (botones.rechazarContabilidad) botones.rechazarContabilidad.style.display = 'inline-block';
            }
            break;

        case 116: // Recaudación confirmada
            if (esTesoreria && botones.cerrarSolicitud)
                botones.cerrarSolicitud.style.display = 'inline-block';
            break;

        case 117: // Aclaración solicitada (ya no bloquea)
            if (esTesoreria) {
                if (tipoTrabajo === 34) {
                    if (botones.confirmarRecaudacion && botones.rechazarTesoreria)
                        botones.confirmarRecaudacion.style.display = 'inline-block';
                        botones.rechazarTesoreria.style.display = 'inline-block';
                } else {
                    if (botones.aceptarAclaracion)
                        botones.aceptarAclaracion.style.display = 'inline-block';
                    if (botones.rechazarAclaracion)
                        botones.rechazarAclaracion.style.display = 'inline-block';
                }
            }
            break;

        case 118: // Rechazada
            if (idUsuario === ZEN_DATABEAN.id_usuario_originador || esSolicitante)
                botones.enviarSolicitud.style.display = 'inline-block';
            botones.cerrarSolicitud.style.display = 'inline-block';
            break;

        case 119: // Aclaración aceptada
            if (esTesoreria && botones.cerrarSolicitud)
                botones.cerrarSolicitud.style.display = 'inline-block';
            break;

        case 120: // Cerrada
            break;
    }

    if ((idUsuario === ZEN_DATABEAN.id_usuario_originador || esSolicitante) && parseInt(requiereAclarar) === 1 && tipoTrabajo != 34) {
        if (botones.adjuntarAclaracion)
            botones.adjuntarAclaracion.style.display = 'inline-block';
    }

    if (esTesoreria && parseInt(requiereAclarar) === 1 && tipoTrabajo === 34) {
        if (botones.adjuntarAclaracion)
            botones.adjuntarAclaracion.style.display = 'inline-block';
    }
}

/////////////////////////////////////////////////////////////// CONFIGURACIÓN DE BOTONERA ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// ENVIAR SOLICITUD ///////////////////////////////////////////////////////////////

document.getElementById('btnEnviarSolicitud').addEventListener('click', async function () {
    const prioridadSeleccionada = document.getElementById('prioridad').value;
    const tipoTrabajo = parseInt(ZEN_DATABEAN.id_tipo_trabajo);

    /*
    if (!prioridadSeleccionada || prioridadSeleccionada === "0") {
        Swal.fire({
            icon: 'warning',
            title: 'Prioridad requerida',
            text: 'Debe seleccionar una prioridad antes de enviar la solicitud.'
        });
        return;
    }
    */

    let stepDestino = null;
    let nombreDestino = '';

    if (tipoTrabajo === 31 || tipoTrabajo === 32) {
        stepDestino = 109;
        nombreDestino = 'En revisión';
    } else if (tipoTrabajo === 33 || tipoTrabajo === 34) {
        stepDestino = 110;
        nombreDestino = 'Por contabilizar';
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Tipo de solicitud no soportado',
            text: 'No se reconoce el tipo de trabajo para esta acción.'
        });
        return;
    }

    const result = await Swal.fire({
        title: "¿Desea enviar la solicitud?",
        text: `Esta acción es irreversible. La solicitud será enviada a revisión por parte de su autorizador.`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Enviar solicitud",
        cancelButtonText: "Cancelar",
        reverseButtons: true
    });

    if (result.isConfirmed) {

        document.getElementById('BOTONERA_SAVE').click();
        await new Promise(resolve => setTimeout(resolve, 500));

        try {
            await ZEN_QUERY({
                id: queryCambiarEstado,
                parametros: {
                    step_id: stepDestino,
                    mensaje_id: mensajeId
                }
            });

            const seguimientoParams = {
                estado_anterior: stepId,
                estado_nuevo: stepDestino,
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: `[${nombreDestino}] Solicitud enviada.`,
                id_tipo_entidad: 1,
                id_entidad: mensajeId
            };

            await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });
            /*

            const requiereFirma = document.getElementById('selectorRequiereFirma')?.value || '0';

            await ZEN_QUERY({
                id: queryRequiereFirma,
                parametros: {
                    requiere_firma: requiereFirma,
                    id: nTicket
                }
            });
            */

            stepId = stepDestino;
            location.reload();

        } catch (error) {
            console.error("Error al enviar la solicitud:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Ocurrió un error al intentar enviar la solicitud.'
            });
        }
    }
});

/////////////////////////////////////////////////////////////// ENVIAR SOLICITUD ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// VALIDAR SOLICITUD ///////////////////////////////////////////////////////////////

document.getElementById('validar').addEventListener('click', async function () {
    const stepDestino = 110;
    const nombreDestino = 'Por contabilizar';
    const esAutoaprobacion = idUsuario === idUsuarioOriginador;
    let justificacionAuto = '';

    const confirmacion = await Swal.fire({
        title: '¿Desea validar esta solicitud?',
        text: `Esta acción es irreversible. La solicitud será validada y enviada a contabilidad.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Validar solicitud',
        cancelButtonText: 'Cancelar',
        reverseButtons: true
    });

    if (!confirmacion.isConfirmed) return;

    // Si se detecta autoaprobación, solicitar justificación
    if (esAutoaprobacion) {
        const { value: justificacion } = await Swal.fire({
            title: 'Autoaprobación detectada',
            input: 'textarea',
            inputLabel: 'Justifique por qué está aprobando su propia solicitud',
            inputPlaceholder: 'Escriba su justificación aquí...',
            inputAttributes: {
                'aria-label': 'Justificación de autoaprobación'
            },
            showCancelButton: true,
            confirmButtonText: 'Continuar',
            cancelButtonText: 'Cancelar',
            inputValidator: (value) => {
                if (!value.trim()) {
                    return 'Debe ingresar una justificación';
                }
            }
        });

        if (!justificacion) return;
        justificacionAuto = justificacion.trim();
    }

    // Validar fecha ratificada de compromiso
    const inputFechaAutorizador = document.getElementById('fechaCriticidadAutorizador');
    const fechaAutorizador = inputFechaAutorizador?.value?.trim();

    if (!fechaAutorizador) {
        await Swal.fire({
            icon: 'warning',
            title: 'Fecha compromiso requerida',
            text: 'Debe ingresar la fecha compromiso ratificada antes de validar la solicitud.'
        });
        return;
    }

    try {
        await ZEN_QUERY({
            id: queryNuevaFechaCriticidad,
            parametros: {
                ticket_id: nTicket,
                usuario_id: idUsuario,
                tipo_fecha: 2, // Tipo 2: fecha ratificada por autorizador
                fecha: fechaAutorizador
            }
        });
        await sendNotificacionFechaCompromiso(nTicket, fechaAutorizador, mailSolicitante, nombreUsuario);
    } catch (err) {
        console.error("Error al registrar fecha criticidad autorizador:", err);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudo guardar la fecha de compromiso ratificada.'
        });
        return;
    }

    document.getElementById('BOTONERA_SAVE').click();

    // Actualizar aprobador si no está asignado
    try {
        await ZEN_QUERY({
            id: queryActualizarAprobador,
            parametros: {
                id_aprobador: idUsuario,
                id_ticket: nTicket
            }
        });
    } catch (error) {
        console.error("Error al actualizar aprobador:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudo actualizar el aprobador antes de validar.'
        });
        return;
    }

    try {
        // Cambiar estado
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: stepDestino,
                mensaje_id: mensajeId
            }
        });

        // Preparar texto de seguimiento
        let descripcionSeguimiento = `[${nombreDestino}] Solicitud validada.`;
        if (esAutoaprobacion) {
            descripcionSeguimiento += ` (Autoaprobada: ${justificacionAuto})`;
        }


        const seguimientoParams = {
            estado_anterior: stepId,
            estado_nuevo: stepDestino,
            fecha_cambio: getChileTime(),
            responsable: idUsuario,
            descripcion: descripcionSeguimiento,
            id_tipo_entidad: 1,
            id_entidad: mensajeId
        };

        await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });


        stepId = stepDestino;
        location.reload();

    } catch (error) {
        console.error("Error al validar la solicitud:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al intentar validar la solicitud.'
        });
    }
});

/////////////////////////////////////////////////////////////// VALIDAR SOLICITUD ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// RECHAZAR SOLICITUD - AUTORIZADOR ///////////////////////////////////////////////////////////////

document.getElementById('rechazar').addEventListener('click', async function () {
    const stepDestino = 118;
    const nombreDestino = 'Rechazada';

    const { value: justificacion } = await Swal.fire({
        title: '¿Está seguro de rechazar esta solicitud?',
        input: 'textarea',
        inputLabel: 'Motivo del rechazo',
        inputPlaceholder: 'Escriba aquí la justificación del rechazo...',
        inputAttributes: {
            'aria-label': 'Motivo del rechazo'
        },
        showCancelButton: true,
        confirmButtonText: 'Rechazar solicitud',
        cancelButtonText: 'Cancelar',
        inputValidator: (value) => {
            if (!value.trim()) {
                return 'Debe ingresar una justificación';
            }
        }
    });

    if (!justificacion) return;

    // Guardar cambios del formulario antes de continuar
    document.getElementById('BOTONERA_SAVE').click();

    try {
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: stepDestino,
                mensaje_id: mensajeId
            }
        });

        const seguimientoParams = {
            estado_anterior: stepId,
            estado_nuevo: stepDestino,
            fecha_cambio: getChileTime(),
            responsable: idUsuario,
            descripcion: `[${nombreDestino}] Solicitud rechazada. Motivo: ${justificacion.trim()}`,
            id_tipo_entidad: 1,
            id_entidad: mensajeId
        };

        await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });

        stepId = stepDestino;
        location.reload();

    } catch (error) {
        console.error("Error al rechazar la solicitud:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al intentar rechazar la solicitud.'
        });
    }
});

/////////////////////////////////////////////////////////////// RECHAZAR SOLICITUD - AUTORIZADOR ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CONTABILIZAR SOLICITUD ///////////////////////////////////////////////////////////////

document.getElementById('btnContabilizar').addEventListener('click', async function () {
    const tipoTrabajo = parseInt(ZEN_DATABEAN.id_tipo_trabajo);
    let stepDestino = null;
    let nombreDestino = '';

    if (tipoTrabajo === 31 || tipoTrabajo === 32) {
        stepDestino = 112;
        nombreDestino = 'Programación de pago pendiente';
    } else if (tipoTrabajo === 34) {
        stepDestino = 117; // Aclaración solicitada
        nombreDestino = 'Aclaración solicitada';
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Tipo de solicitud no soportado',
            text: 'No se reconoce el tipo de trabajo para contabilizar esta solicitud.'
        });
        return;
    }

    const confirmado = await Swal.fire({
        title: '¿Desea contabilizar esta solicitud?',
        text: `Esta acción es irreversible. La solicitud será contabilizada.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, contabilizar',
        cancelButtonText: 'Cancelar',
        reverseButtons: true
    });

    if (!confirmado.isConfirmed) return;

    try {
        const resp = await ZEN_QUERY({
            id: queryValidarComprobante,
            parametros: { mensaje_id: mensajeId }
        });

        const adjuntosContabilidad = parseInt(resp?.result?.[0]?.adjuntos_contabilidad || 0);

        if (adjuntosContabilidad === 0) {
            await Swal.fire({
                icon: 'warning',
                title: 'Falta comprobante contable',
                text: 'Debes adjuntar al menos un comprobante mediante una nota antes de contabilizar la solicitud.',
                confirmButtonText: 'Entendido'
            });
            return;
        }
    } catch (error) {
        console.error("Error al validar adjuntos contables:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudo validar si hay comprobantes adjuntos desde contabilidad.'
        });
        return;
    }

    // Ejecutar guardado del formulario
    const botonGuardar = document.getElementById('BOTONERA_SAVE');
    if (botonGuardar) botonGuardar.click();

    try {
        // 1. Cambio de estado
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: stepDestino,
                mensaje_id: mensajeId
            }
        });

        // 2. Si es recaudación o anticipo, marcar requiere aclaración o crearla directamente
        if ([32, 34].includes(tipoTrabajo)) {
            await ZEN_QUERY({
                id: querySolicitarAclaracion,
                parametros: {
                    requiere_aclaracion: 1,
                    id: nTicket
                }
            });
        }

        // 3. Seguimiento "Contabilizado"
        const seguimientoContabilizado = {
            estado_anterior: stepId,
            estado_nuevo: 111,
            fecha_cambio: getChileTime(),
            responsable: idUsuario,
            descripcion: `[Contabilizado] Solicitud contabilizada.`,
            id_tipo_entidad: 1,
            id_entidad: mensajeId
        };

        await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoContabilizado });

        // 4. Crear seguimiento
        const descripcionSeguimiento =
            tipoTrabajo === 34
                ? `[${nombreDestino}] Solicitud de aclaración generada automáticamente tras contabilización.`
                : `[${nombreDestino}] Solicitud a la espera de aclaración.`;

        const seguimientoParams = {
            estado_anterior: stepId,
            estado_nuevo: stepDestino,
            fecha_cambio: getChileTime(),
            responsable: idUsuario,
            descripcion: descripcionSeguimiento,
            id_tipo_entidad: 1,
            id_entidad: mensajeId
        };

        await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });

        stepId = stepDestino;
        location.reload();

    } catch (error) {
        console.error("Error al contabilizar:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al intentar contabilizar la solicitud.'
        });
    }
});

/////////////////////////////////////////////////////////////// CONTABILIZAR SOLICITUD ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// RECHAZAR SOLICITUD - CONTABILIDAD ///////////////////////////////////////////////////////////////

document.getElementById('btnRechazarContabilidad').addEventListener('click', async function () {
    const stepDestino = 118;
    const nombreDestino = 'Rechazada';

    const { value: motivo } = await Swal.fire({
        title: '¿Está seguro de rechazar esta solicitud?',
        input: 'textarea',
        inputPlaceholder: 'Ingrese el motivo del rechazo',
        inputAttributes: {
            'aria-label': 'Motivo del rechazo'
        },
        showCancelButton: true,
        confirmButtonText: 'Rechazar',
        cancelButtonText: 'Cancelar',
        inputValidator: (value) => {
            if (!value.trim()) {
                return 'Debe ingresar un motivo para rechazar';
            }
        },
        icon: 'warning'
    });

    if (!motivo) return;

    // Ejecutar guardado del formulario
    const botonGuardar = document.getElementById('BOTONERA_SAVE');
    if (botonGuardar) botonGuardar.click();

    try {
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: stepDestino,
                mensaje_id: mensajeId
            }
        });

        const seguimientoParams = {
            estado_anterior: stepId,
            estado_nuevo: stepDestino,
            fecha_cambio: getChileTime(),
            responsable: idUsuario,
            descripcion: `[Rechazada] Solicitud rechazada por contabilidad. Motivo: ${motivo.trim()}`,
            id_tipo_entidad: 1,
            id_entidad: mensajeId
        };

        await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });

        stepId = stepDestino;
        location.reload();

    } catch (error) {
        console.error("Error al rechazar solicitud:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al intentar rechazar la solicitud.'
        });
    }
});

/////////////////////////////////////////////////////////////// RECHAZAR SOLICITUD - CONTABILIDAD ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// SOLICITAR ACLARACIÓN ///////////////////////////////////////////////////////////////

document.getElementById('btnSolicitarAclaracionContab').addEventListener('click', async function () {
    const tipoTrabajo = parseInt(ZEN_DATABEAN.id_tipo_trabajo);
    const esRecaudacion = tipoTrabajo === 34;

    const { value: motivo } = await Swal.fire({
        title: 'Solicitar aclaración',
        input: 'textarea',
        inputLabel: 'Motivo de aclaración',
        inputPlaceholder: 'Ingrese el motivo de la aclaración...',
        inputAttributes: {
            'aria-label': 'Motivo de aclaración'
        },
        showCancelButton: true,
        confirmButtonText: 'Solicitar aclaración',
        cancelButtonText: 'Cancelar',
        inputValidator: (value) => {
            if (!value) return 'Debe ingresar un motivo.';
        }
    });

    if (!motivo) return;

    // Ejecutar guardado del formulario
    const botonGuardar = document.getElementById('BOTONERA_SAVE');
    if (botonGuardar) botonGuardar.click();

    /*
    const montoBase = parseFloat(monto_aclaracion[0] || 0);
    const porcentaje = parseFloat(motivo.replace('%', '').trim());
    const montoCalculado = Math.round(montoBase * (porcentaje / 100));
    */

    try {
        // Marcar requiere_aclaracion = 1
        await ZEN_QUERY({
            id: querySolicitarAclaracion,
            parametros: {
                requiere_aclaracion: 1,
                id: nTicket
            }
        });

        /*
        await ZEN_QUERY({
            id: queryRegistrarMontoAclarar,
            parametros: {
                monto_aclarar: montoCalculado.toString(),
                porcentaje_aclarar: `${porcentaje}%`,
                id_ticket: nTicket
            }
        });
        */

        // Registrar seguimiento
        const seguimientoParams = {
            estado_anterior: stepId,
            estado_nuevo: stepId,
            fecha_cambio: getChileTime(),
            responsable: idUsuario,
            descripcion: `[Aclaración solicitada] Se ha solicitado una aclaración. Motivo: (${motivo}).`,
            id_tipo_entidad: 1,
            id_entidad: mensajeId
        };

        await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });

        Swal.fire({
            icon: 'success',
            title: 'Aclaración solicitada',
            text: 'La solicitud ha sido marcada como pendiente de aclaración.'
        }).then(() => {
            location.reload();
        });

    } catch (error) {
        console.error("Error al solicitar aclaración:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al marcar la solicitud como pendiente de aclaración.'
        });
    }
});

/////////////////////////////////////////////////////////////// SOLICITAR ACLARACIÓN ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// ADJUNTAR ACLARACIÓN ///////////////////////////////////////////////////////////////

document.getElementById('adjuntarAclaracion')?.addEventListener('click', function () {
    if (!nTicket) return;

    const url = `https://zenflow.cl/${workspaceName}/station/console/14?s=${nTicket}`;
    window.location.href = url;
});

/////////////////////////////////////////////////////////////// ADJUNTAR ACLARACIÓN ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// ACEPTAR ACLARACIÓN ///////////////////////////////////////////////////////////////

document.getElementById('btnAceptarAclaracion').addEventListener('click', async function () {
    const confirmacion = await Swal.fire({
        title: '¿Aceptar aclaración?',
        text: 'Esta acción es irreversible. Esta solicitud de aclaración será cerrada y el ticket original será actualizado.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Aceptar aclaración',
        cancelButtonText: 'Cancelar'
    });

    if (!confirmacion.isConfirmed) return;

    try {
        // Cambiar estado del ticket aclaración a 119 (Aclaración aceptada)
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: 119,
                mensaje_id: mensajeId
            }
        });

        // Obtener el ID del ticket padre (bean_id)
        const padreResult = await ZEN_QUERY({
            id: queryObtenerTicketPadre,
            parametros: { id: nTicket }
        });

        const idTicketPadre = padreResult.result[0]?.id_ticket_principal;
        if (!idTicketPadre) throw new Error("No se encontró el ticket padre.");

        // Obtener ID de la instancia del ticket padre (zen_mensaje.id)
        const instanciaResult = await ZEN_QUERY({
            id: queryObtenerInstanciaPadre,
            parametros: { id_ticket_principal: idTicketPadre }
        });

        const instanciaPadre = instanciaResult.result[0]?.id;
        if (!instanciaPadre) throw new Error("No se pudo obtener la instancia del ticket padre.");

        // Crear seguimiento en el ticket hijo (aclaración)
        await ZEN_QUERY({
            id: queryCrearSeguimiento,
            parametros: {
                estado_anterior: stepId,
                estado_nuevo: 119,
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: '[Aclaración aceptada] Se cerró esta solicitud de aclaración.',
                id_tipo_entidad: 1,
                id_entidad: mensajeId
            }
        });

        // Crear seguimiento en el ticket padre (no cambia de estado)
        await ZEN_QUERY({
            id: queryCrearSeguimiento,
            parametros: {
                estado_anterior: stepId, // El estado anterior no cambia, pero lo registramos igual
                estado_nuevo: stepId,
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: '[Aclaración entregada] El solicitante entregó la información adicional solicitada.',
                id_tipo_entidad: 1,
                id_entidad: instanciaPadre
            }
        });

        // Actualizar campo requiere_aclaracion = 2 en el ticket padre
        await ZEN_QUERY({
            id: querySolicitarAclaracion,
            parametros: {
                requiere_aclaracion: 2,
                id: idTicketPadre
            }
        });

        // Redirigir al formulario del ticket padre
        window.location.href = 'https://zenflow.cl/' + workspaceName + '/station/instance/' + instanciaPadre;

    } catch (error) {
        console.error("Error al aceptar aclaración:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al aceptar la aclaración.'
        });
    }
});

/////////////////////////////////////////////////////////////// ACEPTAR ACLARACIÓN ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// RECHAZAR ACLARACIÓN ///////////////////////////////////////////////////////////////

document.getElementById('btnRechazarAclaracion').addEventListener('click', async function () {
    const { value: motivo } = await Swal.fire({
        title: '¿Rechazar aclaración?',
        text: 'Esta acción es irreversible. La solicitud será marcada como Rechazada y el ticket original será notificado.',
        icon: 'warning',
        input: 'text',
        inputPlaceholder: 'Ingrese el motivo del rechazo',
        showCancelButton: true,
        confirmButtonText: 'Rechazar aclaración',
        cancelButtonText: 'Cancelar',
        inputValidator: (value) => {
            if (!value) return 'Debe ingresar un motivo.';
        }
    });

    if (!motivo) return;

    try {
        // Cambiar estado del ticket actual (aclaración) a 118 (Rechazada)
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: 118,
                mensaje_id: mensajeId
            }
        });

        // Obtener ID del ticket padre
        const padreResult = await ZEN_QUERY({
            id: queryObtenerTicketPadre,
            parametros: { id: nTicket }
        });

        const idTicketPadre = padreResult.result[0]?.id_ticket_principal;
        if (!idTicketPadre) throw new Error("No se encontró el ticket padre.");

        // Obtener instancia y etapa actual del ticket padre
        const instanciaResult = await ZEN_QUERY({
            id: queryObtenerInstanciaPadre,
            parametros: { id_ticket_principal: idTicketPadre }
        });

        const instanciaPadre = instanciaResult.result[0]?.id;
        if (!instanciaPadre) throw new Error("No se pudo obtener la instancia del ticket padre.");

        const estadoPadreResult = await ZEN_QUERY({
            id: queryEtapasTicket,
            parametros: { id: instanciaPadre }
        });

        const estadoActualPadre = estadoPadreResult.result?.[0]?.step_id || null;

        // Seguimiento en el ticket de aclaración (actual)
        await ZEN_QUERY({
            id: queryCrearSeguimiento,
            parametros: {
                estado_anterior: stepId,
                estado_nuevo: 118,
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: `[Aclaración rechazada] ${motivo}`,
                id_tipo_entidad: 1,
                id_entidad: mensajeId
            }
        });

        // Seguimiento en el ticket padre
        await ZEN_QUERY({
            id: queryCrearSeguimiento,
            parametros: {
                estado_anterior: estadoActualPadre,
                estado_nuevo: estadoActualPadre,
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: '[Aclaración rechazada] La información solicitada no fue entregada. La solicitud continúa su curso.',
                id_tipo_entidad: 1,
                id_entidad: instanciaPadre
            }
        });

        // Actualizar campo requiere_aclaracion en el padre (3 = aclaración rechazada)
        await ZEN_QUERY({
            id: querySolicitarAclaracion,
            parametros: {
                requiere_aclaracion: 3,
                id: idTicketPadre
            }
        });

        // Redirección automática al ticket padre
        window.location.href = `https://zenflow.cl/${workspaceName}/station/instance/${instanciaPadre}`;

    } catch (error) {
        console.error("Error al rechazar la aclaración:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al rechazar la aclaración.'
        });
    }
});

/////////////////////////////////////////////////////////////// RECHAZAR ACLARACIÓN ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// PAGO POR DIFERENCIA ///////////////////////////////////////////////////////////////

document.getElementById('btnPasarTesoreriaConDiferencia')?.addEventListener('click', async function () {
    const tipoTrabajo = parseInt(ZEN_DATABEAN.id_tipo_trabajo);
    const stepDestino = 112; // Programación de pago pendiente
    const nombreDestino = 'Programación de pago pendiente';
    const diferencia = window.diferenciaMontoAclaracion || 0;
    const diferenciaAbs = Math.abs(parseFloat(diferencia)).toLocaleString();
    const montoAclarado = window.montoAclarado?.toLocaleString() || '-';

    const confirmacion = await Swal.fire({
        title: '¿Desea derivar a Tesorería?',
        html: `
            Se detectó una diferencia de <strong>$${diferenciaAbs}</strong> entre el monto aclarado y el monto original.<br><br>
            Se registrará la contabilización por el monto aclarado y se derivará la diferencia a Tesorería.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, derivar',
        cancelButtonText: 'Cancelar',
        reverseButtons: true
    });

    if (!confirmacion.isConfirmed) return;

    const botonGuardar = document.getElementById('BOTONERA_SAVE');
    if (botonGuardar) botonGuardar.click();

    try {

        const padreResult = await ZEN_QUERY({
            id: queryObtenerTicketPadre,
            parametros: { id: nTicket }
        });

        const idTicketPadre = padreResult.result[0]?.id_ticket_principal;
        if (!idTicketPadre) throw new Error("No se encontró el ticket padre.");

        const instanciaResult = await ZEN_QUERY({
            id: queryObtenerInstanciaPadre,
            parametros: { id_ticket_principal: idTicketPadre }
        });

        const instanciaPadre = instanciaResult.result[0]?.id;
        if (!instanciaPadre) throw new Error("No se pudo obtener la instancia del ticket padre.");

        await ZEN_QUERY({
            id: querySolicitarAclaracion,
            parametros: {
                requiere_aclaracion: 2,
                id: idTicketPadre
            }
        });

        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: stepDestino,
                mensaje_id: mensajeId
            }
        });

        await ZEN_QUERY({
            id: queryCrearSeguimiento,
            parametros: {
                estado_anterior: stepId,
                estado_nuevo: 111, // Contabilizado
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: `[Contabilizado] Aclaración contabilizada por monto recibido: $${montoAclarado}.`,
                id_tipo_entidad: 1,
                id_entidad: mensajeId
            }
        });

        const descripcion = `[${nombreDestino}] Se detecta diferencia de $${diferenciaAbs}. Derivado a Tesorería para gestionar el saldo.`;

        await ZEN_QUERY({
            id: queryCrearSeguimiento,
            parametros: {
                estado_anterior: 111,
                estado_nuevo: stepDestino,
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: descripcion,
                id_tipo_entidad: 1,
                id_entidad: mensajeId
            }
        });

        stepId = stepDestino;
        location.reload();

    } catch (error) {
        console.error("Error al pasar a Tesorería con diferencia:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al intentar derivar la solicitud a Tesorería.'
        });
    }
});

/////////////////////////////////////////////////////////////// PAGO POR DIFERENCIA ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// PROGRAMAR PAGO ///////////////////////////////////////////////////////////////

document.getElementById('btnProgramarPago').addEventListener('click', async function () {
    const { value: formValues } = await Swal.fire({
        title: 'Programar pago',
        html: `
      <label for="fechaProgramacionSwal">Fecha de programación:</label>
      <input id="fechaProgramacionSwal" type="date" class="swal2-input" min="${new Date().toISOString().split('T')[0]}">

      <label for="selectTipoPagoSwal">Tipo de pago:</label>
      <select id="selectTipoPagoSwal" class="swal2-input">
        <option value="">Seleccione</option>
        <option value="TRANSFERENCIA">Transferencia</option>
        <option value="CHEQUE">Cheque</option>
        <option value="EFECTIVO">Efectivo</option>
      </select>
    `,
        focusConfirm: false,
        preConfirm: () => {
            const fecha = document.getElementById('fechaProgramacionSwal').value;
            const tipoPago = document.getElementById('selectTipoPagoSwal').value;
            if (!fecha || !tipoPago) {
                Swal.showValidationMessage('Debe seleccionar una fecha y un tipo de pago');
                return false;
            }
            return { fecha, tipoPago };
        },
        showCancelButton: true,
        confirmButtonText: 'Confirmar',
        cancelButtonText: 'Cancelar'
    });

    if (!formValues) return;

    const { fecha, tipoPago } = formValues;

    const confirmado = await Swal.fire({
        title: '¿Confirmar programación de pago?',
        text: `Esta acción es irreversible. La solicitud pasará a pago programado.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, confirmar',
        cancelButtonText: 'Cancelar',
        reverseButtons: true
    });

    if (!confirmado.isConfirmed) return;

    const botonGuardar = document.getElementById('BOTONERA_SAVE');
    if (botonGuardar) botonGuardar.click();

    try {
        // Insertar fecha definitiva (tipo 3 = Tesorería)
        await ZEN_QUERY({
            id: queryNuevaFechaCriticidad,
            parametros: {
                ticket_id: nTicket,
                usuario_id: idUsuario,
                tipo_fecha: 3,
                fecha: fecha
            }
        });
        await sendNotificacionFechaCompromiso(nTicket, fecha, mailSolicitante, nombreUsuario);


        // Guardar tipo de pago
        await ZEN_QUERY({
            id: queryModificarFormaPago,
            parametros: {
                forma_pago: tipoPago,
                id: nTicket
            }
        });

        // Actualizar el campo visible en la vista
        const inputTipoPago = document.getElementById('inputTipoPagoTesoreria');
        if (inputTipoPago) inputTipoPago.value = tipoPago;

        // Cambiar estado
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: 113,
                mensaje_id: mensajeId
            }
        });

        // Crear seguimiento
        await ZEN_QUERY({
            id: queryCrearSeguimiento,
            parametros: {
                estado_anterior: stepId,
                estado_nuevo: 113,
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: `[Programación de pago] Fecha: ${fecha}. Tipo: ${tipoPago}`,
                id_tipo_entidad: 1,
                id_entidad: mensajeId
            }
        });

        stepId = 113;
        location.reload();

    } catch (error) {
        console.error("Error al programar el pago:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al programar el pago.'
        });
    }
});

/////////////////////////////////////////////////////////////// PROGRAMAR PAGO ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CONFIRMAR PAGO ///////////////////////////////////////////////////////////////

document.getElementById('btnConfirmarTransferencia').addEventListener('click', async function () {
    const stepDestino = 114;
    const nombreDestino = 'Pago confirmado';

    // Validar existencia de comprobante (nota con adjunto)
    try {
        const resp = await ZEN_QUERY({
            id: queryValidarComprobante, // Validar comprobante de pago
            parametros: { mensaje_id: mensajeId }
        });

        const adjuntosTesoreria = parseInt(resp?.result?.[0]?.adjuntos_tesoreria || 0);

        if (adjuntosTesoreria === 0) {
            await Swal.fire({
                icon: 'warning',
                title: 'Falta comprobante de pago',
                text: 'Debes adjuntar al menos un comprobante mediante una nota antes de confirmar el pago.',
                confirmButtonText: 'Entendido'
            });
            return;
        }
    } catch (error) {
        console.error("Error al validar comprobante de pago:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudo validar si hay comprobante de pago adjunto.'
        });
        return;
    }

    const confirmado = await Swal.fire({
        title: '¿Confirmar pago?',
        text: `Esta acción es irreversible. El pago de la solicitud será confirmado.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, confirmar',
        cancelButtonText: 'Cancelar',
        reverseButtons: true
    });

    if (!confirmado.isConfirmed) return;

    // Guardar el formulario antes del cambio de estado
    const botonGuardar = document.getElementById('BOTONERA_SAVE');
    if (botonGuardar) botonGuardar.click();

    try {
        // Cambio de estado
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: stepDestino,
                mensaje_id: mensajeId
            }
        });

        // Seguimiento
        const seguimientoParams = {
            estado_anterior: stepId,
            estado_nuevo: stepDestino,
            fecha_cambio: getChileTime(),
            responsable: idUsuario,
            descripcion: `[Pago confirmado] La solicitud fue pagada.`,
            id_tipo_entidad: 1,
            id_entidad: mensajeId
        };

        await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });

        // Actualizar stepId actual y recargar
        stepId = stepDestino;
        location.reload();

    } catch (error) {
        console.error("Error al confirmar pago:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al intentar confirmar el pago.'
        });
    }
});

/////////////////////////////////////////////////////////////// CONFIRMAR PAGO ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CONFIRMAR RECAUDACIÓN ///////////////////////////////////////////////////////////////

document.getElementById('btnConfirmarRecaudacion').addEventListener('click', async function () {
    // Validar existencia de comprobante (nota con adjunto)
    try {
        const resp = await ZEN_QUERY({
            id: queryValidarComprobante, // Validar comprobante de pago (adjunto en nota)
            parametros: { mensaje_id: mensajeId }
        });

        const adjuntosTesoreria = parseInt(resp?.result?.[0]?.adjuntos_tesoreria || 0);

        if (adjuntosTesoreria === 0) {
            await Swal.fire({
                icon: 'warning',
                title: 'Falta comprobante de recaudación',
                text: 'Debes adjuntar al menos un comprobante mediante una nota antes de confirmar la recaudación.',
                confirmButtonText: 'Entendido'
            });
            return;
        }
    } catch (error) {
        console.error("Error al validar comprobante de recaudación:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudo validar si hay comprobante de recaudación adjunto.'
        });
        return;
    }

    const confirmacion = await Swal.fire({
        title: '¿Confirmar recaudación?',
        text: 'Esta acción es irreversible. La solicitud será marcada como Recaudación confirmada.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Confirmar recaudación',
        cancelButtonText: 'Cancelar'
    });

    if (!confirmacion.isConfirmed) return;

    // Ejecutar guardado del formulario
    const botonGuardar = document.getElementById('BOTONERA_SAVE');
    if (botonGuardar) botonGuardar.click();

    try {
        const stepDestino = 116;
        const nombreDestino = 'Recaudación confirmada';

        // Cambiar estado
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: stepDestino,
                mensaje_id: mensajeId
            }
        });

        // Crear seguimiento
        const seguimientoParams = {
            estado_anterior: stepId,
            estado_nuevo: stepDestino,
            fecha_cambio: getChileTime(),
            responsable: idUsuario,
            descripcion: `[${nombreDestino}] La solicitud fue recaudada.`,
            id_tipo_entidad: 1,
            id_entidad: mensajeId
        };

        await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });

        stepId = stepDestino;
        location.reload();

    } catch (error) {
        console.error("Error al confirmar recaudación:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al confirmar la recaudación.'
        });
    }
});

/////////////////////////////////////////////////////////////// CONFIRMAR RECAUDACIÓN ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// RECHAZAR SOLICITUD - TESORERÍA ///////////////////////////////////////////////////////////////

document.getElementById('btnRechazarTesoreria').addEventListener('click', async function () {
    const stepDestino = 110;
    const nombreDestino = 'Por contabilizar';

    const { value: motivo } = await Swal.fire({
        title: '¿Está seguro de rechazar esta solicitud?',
        input: 'textarea',
        inputPlaceholder: 'Ingrese el motivo del rechazo',
        inputAttributes: {
            'aria-label': 'Motivo del rechazo'
        },
        showCancelButton: true,
        confirmButtonText: 'Rechazar',
        cancelButtonText: 'Cancelar',
        inputValidator: (value) => {
            if (!value.trim()) {
                return 'Debe ingresar un motivo para rechazar';
            }
        },
        icon: 'warning'
    });

    if (!motivo) return;

    // Ejecutar guardado del formulario
    const botonGuardar = document.getElementById('BOTONERA_SAVE');
    if (botonGuardar) botonGuardar.click();

    try {
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: stepDestino,
                mensaje_id: mensajeId
            }
        });

        const seguimientoParams = {
            estado_anterior: stepId,
            estado_nuevo: stepDestino,
            fecha_cambio: getChileTime(),
            responsable: idUsuario,
            descripcion: `[Por contabilizar] Solicitud rechazada por tesorería. Motivo: ${motivo.trim()}`,
            id_tipo_entidad: 1,
            id_entidad: mensajeId
        };

        await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });

        stepId = stepDestino;
        location.reload();

    } catch (error) {
        console.error("Error al rechazar solicitud:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al intentar rechazar la solicitud.'
        });
    }
});

/////////////////////////////////////////////////////////////// RECHAZAR SOLICITUD - TESORERÍA ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CERRAR SOLICITUD ///////////////////////////////////////////////////////////////

document.getElementById('btnCerrarSolicitud')?.addEventListener('click', async function () {
    const stepDestino = 120;
    const nombreDestino = 'Cerrada';

    const confirmacion = await Swal.fire({
        title: '¿Cerrar esta solicitud?',
        text: 'Esta acción es irreversible. La solicitud será marcada como cerrada.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Cerrar solicitud',
        cancelButtonText: 'Cancelar',
        reverseButtons: true
    });

    if (!confirmacion.isConfirmed) return;

    const botonGuardar = document.getElementById('BOTONERA_SAVE');
    if (botonGuardar) botonGuardar.click();

    try {
        // Cambiar estado a 120
        await ZEN_QUERY({
            id: queryCambiarEstado,
            parametros: {
                step_id: stepDestino,
                mensaje_id: mensajeId
            }
        });

        // Crear seguimiento de cierre
        await ZEN_QUERY({
            id: queryCrearSeguimiento,
            parametros: {
                estado_anterior: stepId,
                estado_nuevo: stepDestino,
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: `[${nombreDestino}] La solicitud ha sido finalizada.`,
                id_tipo_entidad: 1,
                id_entidad: mensajeId
            }
        });

        stepId = stepDestino;
        location.reload();

    } catch (error) {
        console.error("Error al cerrar la solicitud:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudo cerrar la solicitud.'
        });
    }
});

/////////////////////////////////////////////////////////////// CERRAR SOLICITUD ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// DESCRIPCIÓN SOLICITUD ///////////////////////////////////////////////////////////////

document.addEventListener('DOMContentLoaded', function () {
    const editarDescripcionButton = document.getElementById('editarDescripcion');
    const guardarDescripcionButton = document.getElementById('guardarDescripcion');
    const cancelarEdicion = document.getElementById('cancelarEdicion');
    const descripcionContainer = document.getElementById('descripcion_1');
    const descripcionInput = document.getElementById('descripcion');
    const labelCuerpoTicket = document.getElementById('labelCuerpoTicket');
    const botoneraSaveButton = document.getElementById('BOTONERA_SAVE');

    // Verificar si el usuario puede editar la descripción (solo solicitante, en etapas específicas)
    const puedeEditarDescripcion = (idUsuario === ZEN_DATABEAN.id_usuario_originador || rolesActivos.esSolicitante) && (stepId === 108 || stepId === 118);
    if (!puedeEditarDescripcion) {
        editarDescripcionButton.style.display = 'none';
    }

    editarDescripcionButton.addEventListener('click', function () {

        window.modoEdicion = true;

        editarDescripcionButton.style.display = 'none';
        descripcionContainer.style.display = 'block';
        guardarDescripcionButton.style.display = 'block';
        cancelarEdicion.style.display = 'block';
        labelCuerpoTicket.style.display = 'none';

        // Inicializar TinyMCE si no está ya activo
        if (!tinymce.get('descripcion')) {
            tinymce.init({
                selector: '#descripcion',
                plugins: 'advlist autolink autoresize lists link image charmap print preview anchor searchreplace visualblocks code fullscreen insertdatetime media table paste code help wordcount',
                toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help | link image media table | forecolor backcolor | charmap emoticons | print preview fullscreen | insertdatetime',
                image_title: true,
                automatic_uploads: true,
                file_picker_types: 'image media file',
                file_picker_callback: function (cb, value, meta) {
                    const input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    input.setAttribute('accept', '*');
                    input.onchange = function () {
                        const file = this.files[0];
                        const reader = new FileReader();
                        reader.onload = function () {
                            const id = 'blobid' + (new Date()).getTime();
                            const blobCache = tinymce.activeEditor.editorUpload.blobCache;
                            const base64 = reader.result.split(',')[1];
                            const blobInfo = blobCache.create(id, file, base64);
                            blobCache.add(blobInfo);
                            cb(blobInfo.blobUri(), { title: file.name });
                        };
                        reader.readAsDataURL(file);
                    };
                    input.click();
                },
                branding: false,
                language: 'es'
            });
        } else {
            tinymce.get('descripcion').setContent(descripcionInput.value);
        }

        const tipoS = parseInt(ZEN_DATABEAN.id_tipo_trabajo);
        cargarTareasPorTipo(tipoS);

    });

    guardarDescripcionButton.addEventListener('click', function () {
        tinymce.triggerSave();
        guardarCambiosDesdeEdicion();
        setTimeout(() => {
            descripcionContainer.style.display = 'none';
            guardarDescripcionButton.style.display = 'none';
            labelCuerpoTicket.style.display = 'block';
            editarDescripcionButton.style.display = 'block';
            botoneraSaveButton.click();
            labelCuerpoTicket.innerHTML = descripcionInput.value;

            if (tinymce.get('descripcion')) {
                tinymce.get('descripcion').remove();
            }
        }, 200);
    });

    cancelarEdicion.addEventListener('click', function () {
        setTimeout(() => {
            window.modoEdicion = false;

            descripcionContainer.style.display = 'none';
            guardarDescripcionButton.style.display = 'none';
            cancelarEdicion.style.display = 'none';
            editarDescripcionButton.style.display = 'block';
            labelCuerpoTicket.style.display = 'block';

            if (tinymce.get('descripcion')) {
                tinymce.get('descripcion').remove();
            }

            cargarCamposPersonalizadosTicket();
        }, 200);
    });

});

/////////////////////////////////////////////////////////////// DESCRIPCIÓN SOLICITUD ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// ESTADOS SOLICITUD ///////////////////////////////////////////////////////////////

function cargarEtapasTicket() {

    ZEN_QUERY({ id: queryEtapasTicket }).then((res) => {
        if (res && res.result && res.result.length) {
            const $estado = $("#estado");
            $estado.empty();

            res.result.forEach((etapa) => {
                const selected = parseInt(etapa.id) === parseInt(stepId);
                $estado.append(
                    new Option(etapa.etapa, etapa.id, selected, selected)
                );
            });

            $estado.select2({
                minimumResultsForSearch: Infinity,
                width: '100%'
            });

            $estado.off("change").on("change", handleEstadoChange);

        } else {
            console.warn("No se obtuvieron etapas.");
        }
    });
}

// Manejar cambio de estado desde el select
function handleEstadoChange(event) {
    const selectedId = $(this).val();

    if (selectedId && selectedId !== stepId.toString()) {
        // Validar firma si es requerida antes de cambiar estado
        if (ZEN_DATABEAN.requiere_firma === '1') {
            verificarFirmaExistente().then(firmaExiste => {
                if (firmaExiste) {
                    cambiarEstado(selectedId);
                } else {
                    Swal.fire({
                        title: "Firma requerida",
                        text: "No se puede cambiar el estado porque no hay una firma registrada.",
                        icon: "warning",
                        confirmButtonText: "OK"
                    });
                }
            }).catch(handleError);
        } else {
            cambiarEstado(selectedId);
        }
    }
}

/*
function verificarFirmaExistente() {
    return ZEN_QUERY({ id: queryObtenerFirmaTicket, parametros: { id: nTicket } })
        .then(result => {
            const firma = result.result[0]?.firma;
            return !!firma;
        })
        .catch(error => {
            console.error('Error al verificar la firma:', error);
            return false;
        });
}
*/

function cambiarEstado(selectedId) {
    const estadoAnteriorNombre = $('#estado option[value=' + stepId + ']').text();
    const estadoAnteriorId = stepId;

    // Actualizar el estado del ticket en la base de datos
    ZEN_QUERY({ id: queryCambiarEstado, parametros: { step_id: selectedId, mensaje_id: mensajeId } })
        .then(async () => {
            stepId = selectedId;
            const estadoNuevoNombre = $('#estado option[value=' + selectedId + ']').text();

            // Registrar seguimiento de cambio de estado
            const seguimientoParams = {
                estado_anterior: estadoAnteriorId,
                estado_nuevo: selectedId,
                fecha_cambio: getChileTime(),
                responsable: idUsuario,
                descripcion: `Cambio de estado de ${estadoAnteriorNombre} a ${estadoNuevoNombre}`,
                id_tipo_entidad: 1, // Tipo entidad 1 = ticket
                id_entidad: mensajeId
            };

            try {
                await ZEN_QUERY({ id: queryCrearSeguimiento, parametros: seguimientoParams });
            } catch (err) {
                console.error('Falló registro de seguimiento:', err);
            }

            // Obtener correo del solicitante
            let mailSolicitante = '';
            try {
                const resultMail = await ZEN_QUERY({ id: queryMailIdUsuario, parametros: { id: ZEN_DATABEAN.id_usuario_originador } });
                mailSolicitante = resultMail.result[0]?.mail || '';
            } catch (err) {
                console.error('Falló obtención de correo:', err);
            }

            // Enviar webhook
            try {
                const webhookResponse = await sendToWebhook(
                    mensajeId,
                    estadoNuevoNombre,
                    seguimientoParams.descripcion,
                    mailSolicitante
                );
            } catch (err) {
                console.error('Webhook falló:', err);
            }

        })
        .catch(handleError);
}

let skipSwal = false;  // Bandera global para controlar el SweetAlert

BEFORE_SEND_DEFAULT = function () {

    switch (ZEN_CASE["step_id"] + "") {
        case "40":
            if (opcionRechazar === 1) {
                FRULEPARAMETERS = [{ name: "next", value: "2" }];
            } else {
                FRULEPARAMETERS = [{ name: "next", value: "1" }];
            }
            break;
        default:
    }
}

async function sendToWebhook(mensaje_id, estadoNuevoNombre, descripcion, mail) {
    const url = "https://hook.us1.make.com/6utkbxmy3xq9gb32xyabmsinjer35xhb";
    const data = {
        mensaje_id: mensaje_id,
        estadoNuevoNombre: estadoNuevoNombre,
        descripcion: descripcion,
        mail: mail
    };

    try {
        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error(`Error en la solicitud: ${response.statusText}`);
        }

        const result = await response.json();
    } catch (error) {
        console.error("Error al enviar al webhook:", error);
    }
}

async function sendToAgente(mensaje_id, link, mail) {
    const url = "https://hook.us1.make.com/19j285tqfmlbrer17syv5hq3bbivlj6r";
    const data = {
        mensaje_id: mensaje_id,
        link: link,
        mail: mail
    };

    try {
        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error(`Error en la solicitud: ${response.statusText}`);
        }
    } catch (error) {
        console.error("Error al enviar al webhook:", error);
    }
}

async function sendNotificacionFechaCompromiso(ticket_id, fecha, mail, origen) {
    const url = "https://hook.us1.make.com/48wxnwccllaqmfvvh8n9lsmgcyujj6qp";
    const data = {
        ticket_id: ticket_id,
        fecha_compromiso: fecha,
        mail: mail,
        origen: origen
    };

    try {
        const response = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error(`Error en webhook: ${response.statusText}`);
        }

    } catch (error) {
        console.error("Falló envío de notificación:", error);
    }
}

/////////////////////////////////////////////////////////////// ESTADOS SOLICITUD ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// SEGUIMIENTOS ///////////////////////////////////////////////////////////////

document.getElementById('verSeguimientos').addEventListener('click', function (event) {
    event.stopPropagation();
    toggleSeguimientos();
});

function toggleSeguimientos() {
    const seguimientoContainer = document.getElementById('seguimientoContainer');

    if (seguimientoContainer.style.display === 'none' || seguimientoContainer.style.display === '') {
        mostrarSeguimientos();
        seguimientoContainer.style.display = 'block';

        // Agregar el listener para cerrar al hacer clic fuera
        setTimeout(() => { // Se agrega un pequeño retraso para que no se cierre inmediatamente
            document.addEventListener('click', clickOutsideListener);
        }, 0);
    } else {
        seguimientoContainer.style.display = 'none';

        // Remover el listener cuando se oculta el componente
        document.removeEventListener('click', clickOutsideListener);
    }
}

function clickOutsideListener(event) {
    const seguimientoContainer = document.getElementById('seguimientoContainer');

    // Si el clic es fuera del seguimientoContainer, lo ocultamos
    if (seguimientoContainer && !seguimientoContainer.contains(event.target)) {
        seguimientoContainer.style.display = 'none';

        // Remover el listener para evitar múltiples asignaciones
        document.removeEventListener('click', clickOutsideListener);
    }
}

function mostrarSeguimientos() {
    ZEN_QUERY({ id: querySeguimientos, parametros: { id_entidad: mensajeId } })
        .then(result => {
            const seguimientos = result.result;
            const seguimientoList = document.getElementById('seguimientoList');
            seguimientoList.innerHTML = ''; // Limpiar la lista antes de agregar los nuevos elementos

            if (seguimientos.length === 0) {
                seguimientoList.innerHTML = '<li class="list-group-item">No se encontraron seguimientos.</li>';
            } else {
                seguimientos.forEach(seguimiento => {
                    const listItem = document.createElement('li');
                    listItem.className = 'list-group-item';

                    // Crear la estructura del seguimiento
                    listItem.innerHTML = `
                        <div class="row seguimiento-item">
                            <div class="col-md-4">
                                <strong>Creado por:</strong> ${seguimiento.responsable}
                            </div>
                            <div class="col-md-8">
                                <strong>Descripción:</strong> ${seguimiento.descripcion}<br>
                                <small><strong>Fecha:</strong> ${formatearFecha(seguimiento.fecha_cambio)}</small>
                            </div>
                        </div>
                    `;
                    seguimientoList.appendChild(listItem);
                });
            }
        })
        .catch(handleError);
}

/////////////////////////////////////////////////////////////// SEGUIMIENTOS ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CARD COLAPSABLES ///////////////////////////////////////////////////////////////

function initializeCollapsibles() {
    toggleIconOnCollapse('#datosContactoCollapse', '#SE87478633');
}

function toggleIconOnCollapse(collapseId, iconId) {
    $(collapseId).on('show.bs.collapse', function () {
        $(iconId + ' i').removeClass('fa-chevron-down').addClass('fa-chevron-up');
    }).on('hide.bs.collapse', function () {
        $(iconId + ' i').removeClass('fa-chevron-up').addClass('fa-chevron-down');
    });
}

function initializeToggleDetalles() {
    const toggleButton = document.getElementById('menuDetalles');
    const columnaDetalles = document.getElementById('columnaDetalles');

    toggleButton.addEventListener('click', () => {
        const isHidden = columnaDetalles.style.display === 'none';
        columnaDetalles.style.display = isHidden ? 'block' : 'none';
        toggleButton.innerHTML = isHidden
            ? '<i class="fa fa-angle-right"></i> Ocultar detalles'
            : '<i class="fa fa-angle-left"></i> Ver detalles';
    });
}

/////////////////////////////////////////////////////////////// CARD COLAPSABLES ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CARGAR DATOS ///////////////////////////////////////////////////////////////

function fetchData(contactoId, stepId) {
    fetchContactData(contactoId);
    fetchPriorities();
    fetchGruposYAgentes();
}

/////////////////////////////////////////////////////////////// CARGAR DATOS ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// OBTENER DATOS DE CONTACTO ///////////////////////////////////////////////////////////////

let mailSolicitante = '';

function cargarMailSolicitante(idUsuarioOriginador) {
    ZEN_QUERY({
        id: queryMailIdUsuario,
        parametros: { id: idUsuarioOriginador }
    })
        .then((resultMail) => {
            mailSolicitante = resultMail.result[0]?.mail || '';
            console.info('Correo del solicitante cargado:', mailSolicitante);
        })
        .catch((err) => {
            mailSolicitante = '';
            console.error('Falló obtención de correo:', err);
        });
}

function fetchContactData(contactoId) {
    ZEN_QUERY({ id: queryDatosContacto, parametros: { id: contactoId } })
        .then(result => populateContactData(result.result[0]))
        .catch(handleError);
}

function populateContactData(contacto) {
    // Verificar si el imagen_perfil ya contiene el prefijo base64
    const base64PrefixPattern = /^data:image\/(png|jpeg|jpg|gif|bmp|webp);base64,/;
    let imagenPerfilSrc;

    if (contacto.imagen_perfil && contacto.imagen_perfil.trim() !== '') {
        imagenPerfilSrc = base64PrefixPattern.test(contacto.imagen_perfil)
            ? contacto.imagen_perfil
            : 'data:image/png;base64,' + contacto.imagen_perfil;
    } else {
        // Imagen por defecto si no hay imagen de perfil
        imagenPerfilSrc = logoDefecto;
    }

    document.getElementById('imagen_perfil').src = imagenPerfilSrc;
    document.getElementById('imagen_perfil_ticket').src = imagenPerfilSrc;
    document.getElementById('nombre_contacto').textContent = contacto.nombre;
    document.getElementById('nombre_contacto_ticket').textContent = contacto.nombre;
    document.getElementById('email').textContent = "Email: " + contacto.mail;
    document.getElementById('nombre_empresa').textContent = "Empresa: " + (contacto.nombre_empresa ?? capitalizedWorkspaceName);
    document.getElementById('empresa').value = contacto.nombre_empresa ?? capitalizedWorkspaceName;
}

/////////////////////////////////////////////////////////////// OBTENER DATOS DE CONTACTO ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// OBTENER TIPOS DE SOLICITUD ///////////////////////////////////////////////////////////////

function fetchTipoTrabajo() {
    ZEN_QUERY({ id: queryTipoTrabajo })
        .then(result => populateTipoTrabajos(result.result))
        .catch(handleError);
}

function populateTipoTrabajos(tipos) {
    const inputTipoTrabajo = document.getElementById('id_tipo_trabajo');
    const tipoTrabajoId = ZEN_DATABEAN.id_tipo_trabajo;

    if (tipoTrabajoId && tipoTrabajoId !== "" && tipoTrabajoId !== 0) {
        const tipoEncontrado = tipos.find(tipo => tipo.id == tipoTrabajoId);
        if (tipoEncontrado) {
            inputTipoTrabajo.value = tipoEncontrado.nombre;
        } else {
            inputTipoTrabajo.value = 'Tipo no encontrado';
        }
    } else {
        inputTipoTrabajo.value = 'Sin tipo asignado';
    }
}

/////////////////////////////////////////////////////////////// OBTENER TIPOS DE SOLICITUD ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// OBTENER PRIORIDADES ///////////////////////////////////////////////////////////////

function fetchPriorities() {
    ZEN_QUERY({ id: queryPrioridades })
        .then(result => populatePriorities(result.result))
        .catch(handleError);
}

function populatePriorities(prioridades) {
    const selectPrioridad = document.getElementById('prioridad');

    selectPrioridad.innerHTML = '';

    prioridades.forEach(prioridad => {
        const option = document.createElement('option');
        option.value = prioridad.id;
        option.textContent = prioridad.nombre;
        selectPrioridad.appendChild(option);

        // Clonar la opción para usarla en selectPrioridadTarea
        const optionClone = option.cloneNode(true);
    });

    // Verificar si existe un valor en ZEN_DATABEAN.prioridad y cargarlo en el select
    const prioridad = ZEN_DATABEAN.prioridad;
    if (prioridad && prioridad !== "" && prioridad !== 0) {
        selectPrioridad.value = prioridad;
    }
}

/////////////////////////////////////////////////////////////// OBTENER PRIORIDADES ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// OBTENER GRUPOS Y AGENTES POR GRUPO ///////////////////////////////////////////////////////////////

function fetchGruposYAgentes() {
    ZEN_QUERY({ id: queryGruposAgentes })
        .then(result => populateGruposYAgentes(result.result))
        .catch(handleError);
}

function populateGruposYAgentes(grupos) {
    const selectGrupo = document.getElementById('grupo');
    const selectAgente = document.getElementById('id_agente');

    selectGrupo.innerHTML = '';
    selectAgente.innerHTML = '';

    grupos.forEach(grupo => {
        const optionGrupo = document.createElement('option');
        optionGrupo.value = grupo.id_grupo;
        optionGrupo.textContent = grupo.nombre_grupo;
        selectGrupo.appendChild(optionGrupo);

        // Clonar la opción del grupo para usarla en selectGrupoTarea
        const optionGrupoClone = optionGrupo.cloneNode(true);
    });

    function handleGrupoChange(grupoSelect, agenteSelect, clearAgente = true) {
        const selectedGrupoId = grupoSelect.value;
        const grupoSeleccionado = grupos.find(grupo => grupo.id_grupo === selectedGrupoId);

        agenteSelect.innerHTML = ''; // Limpiar selectAgente cada vez que se selecciona un grupo

        if (grupoSeleccionado) {
            const agentes = JSON.parse(grupoSeleccionado.agentes);
            if (agentes && agentes.length > 0) {
                agentes.forEach(agente => {
                    const optionAgente = document.createElement('option');
                    optionAgente.value = agente.id_agente;
                    optionAgente.textContent = agente.nombre_agente;
                    optionAgente.dataset.grupo = grupoSeleccionado.id_grupo; // Agregar data-grupo
                    agenteSelect.appendChild(optionAgente);
                });
            } else {
                const optionAgente = document.createElement('option');
                optionAgente.value = '';
                optionAgente.textContent = 'No hay agentes disponibles';
                agenteSelect.appendChild(optionAgente);
            }
        }

        if (clearAgente) {
            agenteSelect.value = '';
        }
    }

    selectGrupo.addEventListener('change', () => handleGrupoChange(selectGrupo, selectAgente, true));

    if (selectGrupo.options.length > 0) {
        selectGrupo.dispatchEvent(new Event('change'));
    }

    const idAgente = ZEN_DATABEAN.id_agente;
    if (idAgente && idAgente !== "" && idAgente !== 0) {
        setTimeout(() => {
            const selectedOption = selectAgente.querySelector(`option[value='${idAgente}']`);
            if (selectedOption) {
                const grupoId = selectedOption.dataset.grupo;
                selectGrupo.value = grupoId;
                handleGrupoChange(selectGrupo, selectAgente, false);
                selectAgente.value = idAgente;
            }
        }, 0);
    }
}

/////////////////////////////////////////////////////////////// OBTENER GRUPOS Y AGENTES POR GRUPO ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// DATOS SOLICITUD ///////////////////////////////////////////////////////////////

let adjuntosURLs = {};

function cargarAdjuntosTicket() {
    ZEN_SPINNER = false;
    $.ajax({
        type: 'POST',
        url: '/api/attach_list_modal',
        data: { data: { filtros: { mensaje_id: ZEN_CASE['id'] } } },
        success: function (result) {
            var data = result;
            var adjuntosContainer = document.getElementById('columnaAdjuntos');
            adjuntosContainer.innerHTML = '';

            let pendientes = data.length;

            data.forEach(fila => {
                $.ajax({
                    type: 'GET',
                    url: '/api/download_geturl/' + fila.id,
                    success: function (response) {

                        adjuntosURLs[fila.nombre] = response.url;
                        if (!descripcion.includes(`[image: ${fila.nombre}]`)) {
                            adjuntosContainer.appendChild(createAdjuntoDiv(fila.nombre, response.url));
                        }
                        pendientes--;
                        if (pendientes === 0) {
                            datosTicket();
                        }
                    },
                    error: function () {
                        console.error('Error al obtener la URL de descarga para el archivo:', fila.nombre);
                        pendientes--;
                        if (pendientes === 0) {
                            datosTicket();
                        }
                    }
                });
            });

            ZEN_SPINNER = true;
        },
        error: function () {
            var adjuntosContainer = document.getElementById('columnaAdjuntos');
            adjuntosContainer.innerHTML = "no hay adjuntos";
            ZEN_SPINNER = true;
        }
    });
}

function createAdjuntoDiv(nombreArchivo, urlArchivo, tipoDoc = null, ccEmpresa = null) {
    const adjuntoDiv = document.createElement('div');
    adjuntoDiv.className = 'adjunto';
    adjuntoDiv.style.background = '#f8f9fa';
    adjuntoDiv.style.border = '1px solid #dee2e6';
    adjuntoDiv.style.borderRadius = '10px';
    adjuntoDiv.style.padding = '14px 16px';
    adjuntoDiv.style.marginBottom = '14px';
    adjuntoDiv.style.boxShadow = '0 1px 3px rgba(0,0,0,0.05)';

    // === Línea 1: Tipo de documento (en negrita)
    if (tipoDoc) {
        const tipo = document.createElement('div');
        tipo.textContent = tipoDoc.toUpperCase();
        tipo.style.fontWeight = '600';
        tipo.style.fontSize = '0.95rem';
        tipo.style.marginBottom = '4px';
        adjuntoDiv.appendChild(tipo);
    }

    // === Línea 2: Link y botón de previsualización
    const fileLine = document.createElement('div');
    fileLine.style.display = 'flex';
    fileLine.style.alignItems = 'center';
    fileLine.style.gap = '8px';

    const link = document.createElement('a');
    link.href = urlArchivo;
    link.target = '_blank';
    link.textContent = nombreArchivo;
    link.style.textDecoration = 'underline';
    link.style.color = '#0a5d6b';
    link.style.fontSize = '0.9rem';
    link.style.fontWeight = '500';

    const eyeIcon = document.createElement('i');
    eyeIcon.className = 'fa fa-eye';
    eyeIcon.style.cursor = 'pointer';
    eyeIcon.style.color = '#495057';
    eyeIcon.title = 'Previsualizar';
    eyeIcon.addEventListener('click', () => previsualizarArchivo(urlArchivo));

    fileLine.appendChild(link);
    fileLine.appendChild(eyeIcon);
    adjuntoDiv.appendChild(fileLine);

    // === Línea 3: Asociación CC
    if (ccEmpresa) {
        const asociado = document.createElement('div');
        asociado.textContent = `Asociado a: ${ccEmpresa}`;
        asociado.style.fontSize = '0.85rem';
        asociado.style.marginTop = '6px';
        asociado.style.color = '#6c757d';
        adjuntoDiv.appendChild(asociado);
    }

    return adjuntoDiv;
}

async function previsualizarArchivo(fileUrl, fileName = "Archivo") {
    const extension = fileUrl.split('.').pop().toLowerCase();
    const esImagen = ['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(extension);
    const esPDF = extension === 'pdf';

    let contenidoHTML = '';

    if (esImagen) {
        contenidoHTML = `<img src="${fileUrl}" style="max-width: 100%; max-height: 70vh; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">`;
    } else if (esPDF) {
        contenidoHTML = `
            <div style="border-radius: 8px; overflow: hidden;">
                <iframe src="https://docs.google.com/gview?url=${encodeURIComponent(fileUrl)}&embedded=true"
                        style="width:100%; height:70vh; border:none;" frameborder="0">
                </iframe>
            </div>`;
    } else {
        contenidoHTML = `
            <div class="text-center">
                <p class="mb-3">No se puede previsualizar este tipo de archivo.</p>
                <a href="${fileUrl}" target="_blank" class="btn btn-sm btn-secondary">Descargar archivo</a>
            </div>`;
    }

    await Swal.fire({
        title: `<div style="font-size: 18px; font-weight: bold;">
                  <i class="fa fa-eye me-2"></i> Previsualizador
               </div>`,
        html: contenidoHTML,
        width: '80vw',
        showCloseButton: true,
        showConfirmButton: false,
        customClass: {
            popup: 'swal2-border-radius'
        }
    });
}

function procesarDescripcion() {
    return descripcion.replace(/\[image: (.+?)\]/g, (match, p1) => {
        if (adjuntosURLs[p1]) {
            return `
                <div class="image-adjunto-container">
                    <img src="${adjuntosURLs[p1]}" alt="${p1}" />
                    <button onclick="verArchivo('${adjuntosURLs[p1]}', '${p1}')" class="view-button">
                        <i class="fa fa-eye"></i>
                    </button>
                </div>`;
        }
        return match;
    });
}

function verArchivo(url, nombre) {
    const nuevaVentana = window.open(url, '_blank');

    nuevaVentana.onload = function () {
        const enlace = nuevaVentana.document.createElement('a');
        enlace.href = url;
        enlace.download = nombre;

        nuevaVentana.document.body.appendChild(enlace);

        enlace.click();

        nuevaVentana.document.body.removeChild(enlace);

        nuevaVentana.close();
    };
}

function datosTicket() {
    document.getElementById('fecha_creacion').textContent = formatearFecha(fechaCreacion);
    document.getElementById('labelMotivoTicket').innerHTML = motivo;
    document.getElementById('labelCuerpoTicket').innerHTML = procesarDescripcion();
    document.getElementById('labelNumeroTicket').innerHTML = "Solicitud N° " + nTicket;
    document.getElementById('labelPrincipal').innerHTML = "Solicitud N°" + nTicket;

}

/////////////////////////////////////////////////////////////// DATOS SOLICITUD ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CREAR NOTA ///////////////////////////////////////////////////////////////

document.getElementById('cancelarCrearNota').addEventListener('click', function () {
    ocultarColumnaDetallesNota();

    if (tinymce.get('descripcion_nota')) {
        tinymce.get('descripcion_nota').remove();
    }
});

document.getElementById('crearNotaTicket').addEventListener('click', toggleNota);
document.getElementById('adjuntarArchivo').addEventListener('click', () => document.getElementById('fileInput').click());
document.getElementById('fileInput').addEventListener('change', handleFileSelect);
document.getElementById('descripcion_nota').addEventListener('drop', handleDrop);
document.getElementById('descripcion_nota').addEventListener('dragover', handleDragOver);
document.getElementById('guardarNota').addEventListener('click', crearNota);

let adjuntos = [];
document.addEventListener('DOMContentLoaded', function () {
    if (!tinymce.get('descripcion_nota')) {
        tinymce.init({
            selector: '#descripcion_nota',
            plugins: 'advlist autolink autoresize lists link image charmap print preview anchor ' +
                'searchreplace visualblocks code fullscreen insertdatetime media table paste code help wordcount',
            toolbar: 'undo redo | formatselect | bold italic backcolor | ' +
                'alignleft aligncenter alignright alignjustify | ' +
                'bullist numlist outdent indent | removeformat | help | ' +
                'link image media table | forecolor backcolor | ' +
                'charmap emoticons | print preview fullscreen | ' +
                'insertdatetime',
            image_title: true,
            automatic_uploads: true,
            file_picker_types: 'image media file',
            branding: false,
            language: 'es',
            setup: function (editor) {
                editor.on('init', function () {
                });
            }
        });
    }
});
async function crearNota() {
    // Esperar a que TinyMCE se inicialice si aún no lo está
    if (!tinymce.get('descripcion_nota')) {
        await new Promise(resolve => {
            let checkEditor = setInterval(() => {
                if (tinymce.get('descripcion_nota')) {
                    clearInterval(checkEditor);
                    resolve();
                }
            }, 200);
        });
    }

    // Ahora que TinyMCE está listo, obtener el contenido
    let editor = tinymce.get('descripcion_nota');
    tinymce.triggerSave();  // Forzar sincronización con el textarea
    let descripcion_nota = editor ? editor.getContent() : '';

    if (!descripcion_nota.trim()) {
        console.error("El contenido de la descripción está vacío.");
        return;
    }

    let fechaObj = new Date();
    let fechaCreacionNota = fechaObj.toISOString().slice(0, 19).replace('T', ' ');

    let tipo_nota = document.getElementById('tipo_nota').value;

    var data = {
        mensaje_id: mensajeId,
        fecha_creacion: getChileTime(),
        descripcion: descripcion_nota,
        tipo_nota: tipo_nota,
        id_usuario_originador: idUsuario
    };

    ZEN_QUERY({ id: queryCrearNota, parametros: data })
        .then(result => {
            const id_nota = result.result[0].id;
            let adjuntoPromises = adjuntos.map(adjunto => insertarAdjunto(id_nota, adjunto));
            return Promise.all(adjuntoPromises);
        })
        .then(() => {
            limpiarFormularioNota();
            ocultarColumnaDetallesNota();
            cargarNotas();
        })
        .catch(handleError);
}

async function insertarAdjunto(idNota, adjunto) {
    const fechaCreacion = new Date().toISOString().slice(0, 19).replace('T', ' ');

    // Subir el archivo y obtener la URL
    const adjuntoUrl = await uploadFile(adjunto.file);

    return ZEN_QUERY({
        id: queryCrearAdjuntoNota,
        parametros: {
            id_nota: idNota,
            adjunto: adjuntoUrl, // Usar la URL del archivo subido
            fecha_creacion: getChileTime(),
            adjunto_name: adjunto.name,
            adjunto_size: adjunto.size
        }
    }).then(result => {
        // Procesamiento adicional si es necesario
    }).catch(handleError);
}

function handleFileSelect(event) {
    const file = event.target.files[0];
    if (file) {
        const adjunto = {
            name: file.name,
            size: file.size,
            file: file // Guardar el archivo para la subida posterior
        };
        adjuntos.push(adjunto);
        insertArchivo(adjunto.name, adjunto.size);
    }
}

function handleDrop(event) {
    event.preventDefault();
    const file = event.dataTransfer.files[0];
    if (file) {
        const adjunto = {
            name: file.name,
            size: file.size,
            file: file // Guardar el archivo para la subida posterior
        };
        adjuntos.push(adjunto);
        insertArchivo(adjunto.name, adjunto.size);
    }
}

function handleDragOver(event) {
    event.preventDefault();
}

/*
async function uploadFile(file) {
    const formData = new FormData();
    formData.append('Filedata', file);

    try {
        const response = await fetch('/configuration/addprivaterecurso', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error('Error al subir el archivo');
        }

        const data = await response.json();
        return data.data.url; // Retornar la URL del archivo subido
    } catch (error) {
        console.error('Error al subir el archivo:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error al subir el archivo.'
        });
        return ''; // Retornar una cadena vacía en caso de error
    }
}
*/
async function uploadFile(file) {
    const formData = new FormData();
    formData.append('Filedata', file);

    try {
        const response = await fetch('/api/createrecurso', {
            method: 'POST',
            body: formData
        });
        console.log("RESPUESTA:", response)

        if (!response.ok) {
            throw new Error('Error al subir el archivo');
        }

        const data = await response.json();
        console.log("respuesta pasada por json: ", data, " y ", data.data[0].url);
        return data.data[0].url; // Retornar la URL del archivo subido
    } catch (error) {
        console.error('Error al subir el archivo:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error al subir el archivo.'
        });
        return ''; // Retornar una cadena vacía en caso de error
    }
}

function insertArchivo(fileName, fileSize) {
    const containerAdjuntos = document.getElementById('containerAdjuntos');
    const div = document.createElement('div');
    div.className = 'adjunto';
    div.style.display = 'flex';
    div.style.alignItems = 'center';
    div.style.margin = '10px 0';

    const removeBtn = document.createElement('span');
    const removeIcon = document.createElement('i');
    removeIcon.className = 'fa fa-trash';
    removeIcon.style.cursor = 'pointer';
    removeIcon.style.marginRight = '10px';
    removeIcon.addEventListener('click', () => {
        div.remove();
        actualizarNumeroAdjuntos();
    });
    removeBtn.appendChild(removeIcon);

    const nameSpan = document.createElement('span');
    nameSpan.textContent = `${fileName} (${(fileSize / 1024).toFixed(2)} KB)`;
    nameSpan.style.marginRight = '10px';

    div.appendChild(removeBtn);
    div.appendChild(nameSpan);
    containerAdjuntos.appendChild(div);

    actualizarNumeroAdjuntos();
}

function actualizarNumeroAdjuntos() {
    const containerAdjuntos = document.getElementById('containerAdjuntos');
    const labelNumeroAdjuntos = document.getElementById('labelNumeroAdjuntos');
    const numAdjuntos = containerAdjuntos.querySelectorAll('.adjunto').length;
    labelNumeroAdjuntos.textContent = `Adjuntos subidos: ${numAdjuntos}`;
    labelNumeroAdjuntos.style.display = numAdjuntos > 0 ? 'block' : 'none';
}

function limpiarFormularioNota() {
    document.getElementById('descripcion_nota').value = '';
    const containerAdjuntos = document.getElementById('containerAdjuntos');
    containerAdjuntos.innerHTML = '';
    adjuntos = [];
    actualizarNumeroAdjuntos();
}

function toggleNota() {
    const columnaDetallesNota = document.getElementById('columnaDetallesNota');
    const crearNotaTicketBtn = document.getElementById('crearNotaTicket');
    const isHidden = columnaDetallesNota.style.display === 'none' || columnaDetallesNota.style.display === '';

    if (isHidden) {
        columnaDetallesNota.style.display = 'block';
        crearNotaTicketBtn.style.display = 'none';
    }
}

function ocultarColumnaDetallesNota() {
    const columnaDetallesNota = document.getElementById('columnaDetallesNota');
    columnaDetallesNota.style.display = 'none';
    const crearNotaTicketBtn = document.getElementById('crearNotaTicket');
    crearNotaTicketBtn.style.display = 'block';
}

/////////////////////////////////////////////////////////////// CREAR NOTA ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// OBTENER NOTA ///////////////////////////////////////////////////////////////

function cargarNotas() {
    ZEN_QUERY({ id: queryCargarNotas, parametros: { mensaje_id: mensajeId } })
        .then(result => populateNotas(result.result))
        .catch(handleError);
}

function populateNotas(notas) {
    const base64PrefixPattern = /^data:image\/(png|jpeg|jpg|gif|bmp|webp);base64,/;
    const columnaNotas = document.getElementById('columnaNotas');
    columnaNotas.innerHTML = '';

    notas.forEach(nota => {
        const notaDiv = document.createElement('div');
        notaDiv.className = 'nota';
        notaDiv.style.position = 'relative'; // Importante para posicionar el botón absoluto
        notaDiv.style.border = '1px solid #ddd';
        notaDiv.style.borderRadius = '5px';
        notaDiv.style.padding = '10px';
        notaDiv.style.marginBottom = '10px';
        notaDiv.style.backgroundColor = '#d7faed';

        // Crear botón de tipo de nota
        const tipoNotaBtn = document.createElement('button');
        tipoNotaBtn.textContent = nota.tipo_nota === "1" ? "Público" : "Privado";
        tipoNotaBtn.className = 'btn btn-sm';
        tipoNotaBtn.style.position = 'absolute';
        tipoNotaBtn.style.top = '5px';
        tipoNotaBtn.style.right = '5px';
        tipoNotaBtn.style.borderRadius = '5px';

        // Dependiendo del tipo, cambia el color del botón
        if (nota.tipo_nota === "1") {
            tipoNotaBtn.className += ' btn-info';
        } else {
            tipoNotaBtn.className += ' btn-secondary';
        }

        const descripcion = document.createElement('p');
        descripcion.innerHTML = nota.descripcion;
        descripcion.style.color = 'black';
        descripcion.style.marginTop = '15px';

        const avatar = document.createElement('img');

        if (nota.avatar_agente && nota.avatar_agente.trim() !== '') {
            imagenPerfilSrc = base64PrefixPattern.test(nota.avatar_agente)
                ? nota.avatar_agente
                : 'data:image/png;base64,' + nota.avatar_agente;
        } else {
            imagenPerfilSrc = logoDefecto;
        }

        avatar.src = imagenPerfilSrc;
        avatar.style.width = '50px';
        avatar.style.height = '50px';
        avatar.style.borderRadius = '50%';
        avatar.style.marginRight = '10px';

        const usuario = document.createElement('label');
        usuario.style.display = 'block';
        usuario.style.fontSize = 'medium';
        usuario.style.marginBottom = '0';
        usuario.style.color = '#666';
        usuario.textContent = nota.nombre_agente;

        const fecha = document.createElement('label');
        fecha.style.display = 'block';
        fecha.style.marginBottom = '0';
        fecha.style.color = '#666';
        fecha.style.fontStyle = 'italic';
        fecha.textContent = formatearFecha(nota.fecha_creacion);

        const infoDiv = document.createElement('div');
        infoDiv.style.display = 'flex';
        infoDiv.style.alignItems = 'center';

        const avatarCol = document.createElement('div');
        avatarCol.style.flex = '0 0 60px';
        avatarCol.appendChild(avatar);

        const infoCol = document.createElement('div');
        infoCol.style.flex = '1';
        infoCol.appendChild(usuario);
        infoCol.appendChild(fecha);

        infoDiv.appendChild(avatarCol);
        infoDiv.appendChild(infoCol);

        notaDiv.appendChild(infoDiv);
        notaDiv.appendChild(descripcion);
        notaDiv.appendChild(tipoNotaBtn); // Agregar el botón al contenedor de la nota
        columnaNotas.appendChild(notaDiv);

        // Cargar adjuntos para la nota actual
        cargarAdjuntosNota(nota.id, notaDiv);
    });
}

function cargarAdjuntosNota(id_nota, notaDiv) {
    ZEN_QUERY({ id: queryAdjuntosNotas, parametros: { id_nota: id_nota } })
        .then(result => {
            const adjuntos = result.result;
            const containerAdjuntos = document.createElement('div');
            containerAdjuntos.className = 'containerAdjuntos columna-izquierda';
            containerAdjuntos.style.marginTop = '10px';

            adjuntos.forEach(adjunto => {
                const div = document.createElement('div');
                div.className = 'adjunto columna-izquierda';
                div.style.display = 'flex';
                div.style.alignItems = 'center';
                div.style.margin = '10px 0';

                const downloadBtn = document.createElement('span');
                const downloadIcon = document.createElement('i');
                downloadIcon.className = 'fa fa-download';
                downloadIcon.style.cursor = 'pointer';
                downloadIcon.style.marginRight = '10px';
                downloadIcon.addEventListener('click', () => {
                    const link = document.createElement('a');
                    link.href = adjunto.adjunto; // Usar la URL directa del adjunto
                    link.download = adjunto.adjunto_name;

                    // Simula la descarga de archivo usando Blob
                    fetch(adjunto.adjunto)
                        .then(response => response.blob())
                        .then(blob => {
                            const url = URL.createObjectURL(blob);
                            link.href = url;
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                            URL.revokeObjectURL(url); // Liberar memoria
                        })
                        .catch(error => console.error('Error al descargar el archivo:', error));
                });


                downloadBtn.appendChild(downloadIcon);

                const nameSpan = document.createElement('span');
                nameSpan.textContent = `${adjunto.adjunto_name} (${(adjunto.adjunto_size / 1024).toFixed(2)} KB)`;
                nameSpan.style.marginRight = '10px';

                div.appendChild(downloadBtn);
                div.appendChild(nameSpan);
                containerAdjuntos.appendChild(div);
            });

            notaDiv.appendChild(containerAdjuntos);
        })
        .catch(handleError);
}

/////////////////////////////////////////////////////////////// OBTENER NOTA ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CARGAR ÚLTIMAS SOLICITUDES ///////////////////////////////////////////////////////////////

function cargarUltimosTickets() {
    ZEN_QUERY({ id: queryUltimosTicket, parametros: { id_usuario_originador: idUsuarioOriginador, id_excluir: mensajeId } })
        .then(result => populateUltimosTickets(result.result))
        .catch(handleError);
}

function populateUltimosTickets(tickets) {
    const rowTicketsAnteriores = document.getElementById('rowTicketsAnteriores');
    rowTicketsAnteriores.innerHTML = '';

    tickets.forEach(ticket => {
        const ticketDiv = document.createElement('div');
        ticketDiv.className = 'row row-card-ticket';
        ticketDiv.setAttribute('edrag', '01');
        ticketDiv.setAttribute('elecod', 'PC_03');

        const iconoDiv = document.createElement('div');
        iconoDiv.className = 'col-sm-12 col-md-1 col-icono-ticket';
        iconoDiv.setAttribute('edrag', '04');
        iconoDiv.setAttribute('elecod', 'PC_04');
        iconoDiv.style = '';

        const iconoLabel = document.createElement('label');
        iconoLabel.className = 'col-form-label col-form-label-sm col-icono-ticket';
        iconoLabel.setAttribute('edrag', '05');
        iconoLabel.setAttribute('elecod', 'PC_18');
        iconoLabel.innerHTML = '<i class="fa fa-ticket"></i>';
        iconoDiv.appendChild(iconoLabel);

        const infoDiv = document.createElement('div');
        infoDiv.className = 'col-sm-12 col-md-10 col-ticket-anteriores';
        infoDiv.setAttribute('edrag', '04');
        infoDiv.setAttribute('elecod', 'PC_04');
        infoDiv.style = '';

        const motivoLabel = document.createElement('label');
        motivoLabel.className = 'col-form-label col-form-label-sm';
        motivoLabel.setAttribute('edrag', '05');
        motivoLabel.setAttribute('elecod', 'PC_18');
        motivoLabel.textContent = ticket.motivo;

        const idLabel = document.createElement('label');
        idLabel.className = 'col-form-label col-form-label-sm';
        idLabel.setAttribute('edrag', '05');
        idLabel.setAttribute('elecod', 'PC_18');
        idLabel.textContent = `Solicitud n°: ${ticket.id_ticket}`;

        const fechaLabel = document.createElement('label');
        fechaLabel.className = 'col-form-label col-form-label-sm';
        fechaLabel.setAttribute('edrag', '05');
        fechaLabel.setAttribute('elecod', 'PC_18');
        fechaLabel.innerHTML = `<small>Fecha de creación: ${formatearFecha(ticket.fecha_creacion)}</small>`;

        const estadoLabel = document.createElement('label');
        estadoLabel.className = 'col-form-label col-form-label-sm';
        estadoLabel.setAttribute('edrag', '05');
        estadoLabel.setAttribute('elecod', 'PC_18');
        estadoLabel.textContent = `Estado: ${ticket.estado}`;

        infoDiv.appendChild(idLabel);
        infoDiv.appendChild(estadoLabel);
        infoDiv.appendChild(motivoLabel);
        infoDiv.appendChild(fechaLabel);

        ticketDiv.appendChild(iconoDiv);
        ticketDiv.appendChild(infoDiv);

        rowTicketsAnteriores.appendChild(ticketDiv);
    });
}

/////////////////////////////////////////////////////////////// CARGAR ÚLTIMAS SOLICITUDES ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// FIRMA CONTACTO ///////////////////////////////////////////////////////////////

document.addEventListener("DOMContentLoaded", function () {
    let firmaContainer = document.getElementById('firmaContainer');
    let colFirmaContacto = document.getElementById('colFirmaContacto');
    let canvas = document.getElementById('canvasFirma');
    let ctx = canvas.getContext('2d');
    let isDrawing = false;
    let startX, startY;
    let firmaSubida = null;

    // Ocultar el contenedor si no requiere firma
    if (ZEN_DATABEAN.requiere_firma !== '1' || stepId == 108) {
        colFirmaContacto.style.display = 'none';
    }

    // Función para cargar la firma si existe
    function cargarFirmaExistente() {
        ZEN_QUERY({ id: queryObtenerFirmaTicket, parametros: { id: nTicket } })
            .then(result => {
                const firma = result.result[0]?.firma;
                if (firma) {
                    // Mostrar la firma en el contenedor si existe
                    firmaContainer.innerHTML = `<img src="${firma}" alt="Firma" style="width: 100%; height: auto;" />`;
                } else {
                    return;
                }
            })
            .catch(error => {
                //console.error('Error al obtener la firma:', error);
                return;
            });
    }

    cargarFirmaExistente();

    // Lógica para abrir el modal
    firmaContainer.addEventListener('click', function () {
        $('#modalFirma').modal('show');
    });

    // Ajustar el tamaño del canvas
    function resizeCanvas() {
        canvas.width = canvas.offsetWidth;
        canvas.height = 200;
        ctx.clearRect(0, 0, canvas.width, canvas.height); // Limpiar cualquier dibujo anterior
    }

    // Iniciar el dibujo en el canvas
    function startDrawing(x, y) {
        isDrawing = true;
        startX = x;
        startY = y;
        ctx.moveTo(startX, startY);

        // Limpiar el archivo subido si se empieza a dibujar
        firmaSubida = null;
        document.getElementById('inputSubirFirma').value = ''; // Resetea el input de archivo
        document.getElementById('previewSubidaFirma').style.display = 'none'; // Oculta la previsualización
        document.getElementById('imgSubidaFirma').src = ''; // Elimina la imagen previa
    }

    // Dibuja mientras el mouse o el dedo se mueve
    function draw(x, y) {
        if (!isDrawing) return;
        ctx.lineTo(x, y);
        ctx.stroke();
    }

    // Finalizar el dibujo
    function stopDrawing() {
        isDrawing = false;
        ctx.beginPath(); // Empezar un nuevo trazo
    }

    // Eventos para dispositivos táctiles
    if ('ontouchstart' in window || navigator.maxTouchPoints > 0) {
        canvas.addEventListener('touchstart', function (e) {
            let touch = e.touches[0];
            let rect = canvas.getBoundingClientRect();
            startDrawing(touch.clientX - rect.left, touch.clientY - rect.top);
        });

        canvas.addEventListener('touchmove', function (e) {
            let touch = e.touches[0];
            let rect = canvas.getBoundingClientRect();
            draw(touch.clientX - rect.left, touch.clientY - rect.top);
        });

        canvas.addEventListener('touchend', stopDrawing);
    }

    // Eventos para dispositivos con mouse
    else {
        canvas.addEventListener('mousedown', function (e) {
            let rect = canvas.getBoundingClientRect();
            startDrawing(e.clientX - rect.left, e.clientY - rect.top);
        });

        canvas.addEventListener('mousemove', function (e) {
            let rect = canvas.getBoundingClientRect();
            draw(e.clientX - rect.left, e.clientY - rect.top);
        });

        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseleave', stopDrawing);
    }

    // Redimensionar el canvas cuando se abre el modal
    $('#modalFirma').on('shown.bs.modal', function () {
        resizeCanvas(); // Ajustar el tamaño del canvas cuando el modal es visible
    });

    document.getElementById('limpiarFirma').addEventListener('click', function () {
        // Limpiar el canvas (firma dibujada)
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Limpiar el archivo subido
        firmaSubida = null;
        document.getElementById('inputSubirFirma').value = ''; // Resetea el input de archivo
        document.getElementById('previewSubidaFirma').style.display = 'none'; // Oculta la previsualización
        document.getElementById('imgSubidaFirma').src = ''; // Elimina la imagen previa
    });

    // Lógica para subir una firma desde un archivo
    document.getElementById('inputSubirFirma').addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                // Limpiar el canvas si se sube un archivo
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                // Mostrar la imagen cargada en el div de previsualización
                document.getElementById('imgSubidaFirma').src = e.target.result;
                document.getElementById('previewSubidaFirma').style.display = 'block';
                firmaSubida = e.target.result; // Guardar la firma subida
            };
            reader.readAsDataURL(file);
        }
    });

    // Lógica para guardar la firma (dibujo o subida)
    document.getElementById('guardarFirma').addEventListener('click', function () {
        let dataURL;
        if (firmaSubida) {
            dataURL = firmaSubida; // Firma subida por el usuario
        } else {
            dataURL = canvas.toDataURL('image/png'); // Firma dibujada en el canvas
        }

        // Parámetros que serán enviados en la ZEN_QUERY
        const parametros = {
            id_ticket: nTicket,  // id del ticket
            id_usuario: idUsuarioOriginador,  // id del usuario
            firma: dataURL,  // Firma en formato base64
            fecha: getChileTime()  // Fecha actual
        };

        // Llamar a la ZEN_QUERY con id 186
        ZEN_QUERY({ id: queryFirmaTicket, parametros: parametros })
            .then(result => {
                // Actualizar el contenedor con la imagen de la firma
                firmaContainer.innerHTML = `<img src="${dataURL}" alt="Firma" style="width: 100%; height: auto;" />`;
                $('#modalFirma').modal('hide'); // Cerrar el modal
            })
            .catch(error => {
                console.error('Error al guardar la firma:', error);
            });
    });
});

/////////////////////////////////////////////////////////////// FIRMA CONTACTO ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// FUNCIONES ADICIONALES ///////////////////////////////////////////////////////////////

function handleError(err) {
    console.error("An error occurred:", err);
}

function getFieldValue(id, defaultValue = '') {
    const element = document.getElementById(id);
    if (element) {
        if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
            return element.value || defaultValue;
        }
        if (element.tagName === 'SELECT') {
            return parseInt(element.value) || defaultValue;
        }
    }
    return defaultValue;
}

function getCurrentFormattedDate() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

function formatearFecha(fecha) {
    const opcionesFecha = { weekday: 'short', day: '2-digit', month: 'short', year: 'numeric' };
    const opcionesHora = { hour: '2-digit', minute: '2-digit', hour12: true };

    let fechaObj;

    fechaObj = new Date(Date.parse(fecha));

    if (isNaN(fechaObj)) {
        const matchFormato = fecha.match(/^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})$/);
        if (matchFormato) {
            const [_, año, mes, día, hora, minuto, segundo] = matchFormato;
            fechaObj = new Date(`${año}-${mes}-${día}T${hora}:${minuto}:${segundo}`);
        }
    }

    if (isNaN(fechaObj)) {
        console.error("Fecha inválida:", fecha);
        return "Fecha inválida";
    }

    const hoy = new Date();
    const diferenciaTiempo = hoy - fechaObj;
    const diferenciaDias = Math.floor(diferenciaTiempo / (1000 * 60 * 60 * 24));

    const fechaFormateada = fechaObj.toLocaleDateString('es-ES', opcionesFecha);
    const horaFormateada = fechaObj.toLocaleTimeString('es-ES', opcionesHora);

    const resultado = `Hace ${diferenciaDias} días (${fechaFormateada} a las ${horaFormateada})`;

    return resultado;
}

const renderizarTicketsAclaracion = () => {
    const beanIdActual = parseInt(nTicket);

    const contenedor = document.getElementById('rowTareasServicio');
    if (!contenedor) {
        console.warn('No se encontró el contenedor #rowTareasServicio');
        return;
    }

    contenedor.innerHTML = '';

    ZEN_QUERY({
        id: queryObtenerTicketsAclaracion,
        parametros: {
            id_ticket_principal: beanIdActual,
            id_excluir: beanIdActual
        }
    }).then(res => {

        if (!res || !Array.isArray(res.result)) {
            return;
        }

        if (res.result.length === 0) {
            console.info('No hay tickets de aclaración para este ticket.');
            return;
        }

        res.result.forEach(ticket => {
            const tareaDiv = document.createElement('div');
            tareaDiv.className = 'row row-card-ticket';
            tareaDiv.setAttribute('edrag', '01');
            tareaDiv.setAttribute('elecod', 'PC_03');

            // Ícono
            const iconoDiv = document.createElement('div');
            iconoDiv.className = 'col-sm-12 col-md-1 col-icono-ticket';
            iconoDiv.setAttribute('edrag', '04');
            iconoDiv.setAttribute('elecod', 'PC_04');
            iconoDiv.style.cursor = 'default';

            const iconoLabel = document.createElement('label');
            iconoLabel.className = 'col-form-label col-form-label-sm col-icono-ticket';
            iconoLabel.setAttribute('edrag', '05');
            iconoLabel.setAttribute('elecod', 'PC_18');
            iconoLabel.innerHTML = '<i class="fa fa-comments"></i>';
            iconoDiv.appendChild(iconoLabel);

            // Info
            const infoDiv = document.createElement('div');
            infoDiv.className = 'col-sm-12 col-md-9 col-ticket-anteriores';
            infoDiv.setAttribute('edrag', '04');
            infoDiv.setAttribute('elecod', 'PC_04');

            const idLabel = document.createElement('label');
            idLabel.className = 'col-form-label col-form-label-lg';
            idLabel.setAttribute('edrag', '05');
            idLabel.setAttribute('elecod', 'PC_18');
            idLabel.textContent = `Solicitud de aclaración n°: ${ticket.id_ticket_hijo}`;

            const etapaLabel = document.createElement('label');
            etapaLabel.className = 'col-form-label col-form-label-sm';
            etapaLabel.setAttribute('edrag', '05');
            etapaLabel.setAttribute('elecod', 'PC_18');
            etapaLabel.textContent = `Etapa: ${ticket.etapa}`;

            const motivoLabel = document.createElement('p');
            motivoLabel.className = 'col-form-label col-form-label-sm';
            motivoLabel.setAttribute('edrag', '05');
            motivoLabel.setAttribute('elecod', 'PC_18');
            motivoLabel.textContent = ticket.motivo ? `Motivo: ${ticket.motivo}` : '';

            infoDiv.appendChild(idLabel);
            infoDiv.appendChild(etapaLabel);
            infoDiv.appendChild(motivoLabel);

            // Link
            const linkDiv = document.createElement('div');
            linkDiv.className = 'col-sm-12 col-md-2 col-icono-ticket';
            linkDiv.setAttribute('edrag', '04');
            linkDiv.setAttribute('elecod', 'PC_04');

            const linkLabel = document.createElement('a');
            linkLabel.className = 'col-form-label col-form-label-sm col-icono-ticket';
            linkLabel.setAttribute('edrag', '05');
            linkLabel.setAttribute('elecod', 'PC_18');
            linkLabel.href = `https://zenflow.cl/${workspaceName}/station/instance/${ticket.mensaje_id}`;
            linkLabel.target = '_blank';
            linkLabel.innerHTML = '<i class="fa fa-arrow-right"></i>';
            linkDiv.appendChild(linkLabel);

            tareaDiv.appendChild(iconoDiv);
            tareaDiv.appendChild(infoDiv);
            tareaDiv.appendChild(linkDiv);

            contenedor.appendChild(tareaDiv);
        });
    }).catch(err => {
        return;
    });
};

async function cargarFechasCriticidad() {
    try {
        const resp = await ZEN_QUERY({
            id: queryFechaCriticidad, // Obtener fechas criticidad
            parametros: { ticket_id: nTicket }
        });

        if (!resp?.result || !Array.isArray(resp.result)) return;

        resp.result.forEach(f => {
            const inputId = {
                1: 'fechaCriticidadSolicitante',
                2: 'fechaCriticidadAutorizador',
                3: 'fechaCriticidadTesoreria'
            }[parseInt(f.tipo_fecha)];

            const input = document.getElementById(inputId);
            if (input && input._flatpickr) {
                input._flatpickr.setDate(f.fecha, false);
            }
        });

    } catch (error) {
        console.error('Error al cargar fechas de criticidad:', error);
    }
}

function gestionarCriticidadPorRolYEtapa() {
    const tipoSolicitud = parseInt(ZEN_DATABEAN.id_tipo_trabajo);
    const etapa = parseInt(stepId);

    const columnaCriticidad = document.getElementById('columnaCriticidad');
    const columnaTipoPago = document.getElementById('columnaTipoPago');

    const mostrarBloques = (
        [31, 32].includes(tipoSolicitud) ||
        (tipoSolicitud === 33 && etapa >= 112 && etapa < 118)
    );

    if (columnaCriticidad) columnaCriticidad.style.display = mostrarBloques ? '' : 'none';
    if (columnaTipoPago) columnaTipoPago.style.display = mostrarBloques ? '' : 'none';

    if (!mostrarBloques) return;

    const bloqueSolicitante = document.getElementById('bloqueFechaCriticidadSolicitante');
    const bloqueAutorizador = document.getElementById('bloqueFechaCriticidadAutorizador');
    const bloqueTesoreria = document.getElementById('bloqueFechaCriticidadTesoreria');

    const inputSolicitante = document.getElementById('fechaCriticidadSolicitante');
    const inputAut = document.getElementById('fechaCriticidadAutorizador');
    const inputTes = document.getElementById('fechaCriticidadTesoreria');

    const esPagoOAnticipo = [31, 32].includes(tipoSolicitud);

    if (bloqueSolicitante) bloqueSolicitante.style.display = esPagoOAnticipo ? '' : 'none';
    if (inputSolicitante) {
        inputSolicitante.readOnly = true;
        inputSolicitante.classList.add('flatpickr-disabled');
    }

    if (bloqueAutorizador && inputAut) {
        if (esPagoOAnticipo && etapa >= 109) {
            bloqueAutorizador.style.display = '';
            inputAut.readOnly = etapa !== 109;
            if (etapa !== 109) inputAut.classList.add('flatpickr-disabled');
        } else {
            bloqueAutorizador.style.display = 'none';
        }
    }

    if (bloqueTesoreria && inputTes) {
        if (etapa >= 113) {
            bloqueTesoreria.style.display = '';
            inputTes.readOnly = true;
            inputTes.classList.add('flatpickr-disabled');
        } else {
            bloqueTesoreria.style.display = 'none';
        }
    }

}

function cargarTipoPagoVisual() {
    const tipo = ZEN_DATABEAN.forma_pago;
    const input = document.getElementById('inputTipoPagoTesoreria');
    if (input) {
        input.value = tipo && tipo.trim() !== '' ? tipo : 'No definido';
    }
}

/////////////////////////////////////////////////////////////// FUNCIONES ADICIONALES ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// CARGAR VALORES DE LOS CAMPOS ///////////////////////////////////////////////////////////////

let monto_aclaracion = [];

// Define máximo de caracteres y función de truncado
const MAX_NOMBRE_LENGTH = 30;
function truncate(text, max = MAX_NOMBRE_LENGTH) {
    return (typeof text === 'string' && text.length > max)
        ? text.slice(0, max) + '…'
        : text;
}

async function cargarCamposPersonalizadosTicket() {
    try {
        const result = await ZEN_QUERY({ id: queryCargarCampos, parametros: { idTareaServicio: nTicket } });
        const campos = Array.isArray(result.result) ? result.result : [];
        const contenedor = document.getElementById('listaCamposTicket');

        if (!contenedor) return console.error("No se encontró el contenedor de campos personalizados");
        contenedor.innerHTML = '';

        if (campos.length > 0) {
            document.getElementById('camposPersonalizadosTicket').style.display = 'block';
        } else {
            document.getElementById('camposPersonalizadosTicket').style.display = 'none';
        }

        const distResult = await ZEN_QUERY({ id: queryDistribucionTarea, parametros: { id_tarea_servicio: nTicket } });
        const distribuciones = Array.isArray(distResult.result) ? distResult.result : [];

        if (window.modoEdicion === true) {
            const camposExtendidosResp = await ZEN_QUERY({ id: queryCamposExtendidos, parametros: { idTareaServicio: nTicket } });
            const camposExtendidos = Array.isArray(camposExtendidosResp.result) ? camposExtendidosResp.result : [];
            window.camposPlantillaActual = camposExtendidos;
            await cargarCamposTarea(camposExtendidos, distribuciones);
            return;
        }

        // === Construir mapa de nombres legibles para CC y Empresa
        const mapCCNombres = {};
        distribuciones.forEach(d => {
            const key = `${d.id_centro_costo}___${d.id_empresa}`;
            mapCCNombres[key] = `${d.nombre_centro} — ${d.nombre_empresa}`;
        });

        const nombresEmpresa = [...new Set(distribuciones.map(d => d.nombre_empresa).filter(Boolean))];
        if (nombresEmpresa.length > 0) {
            const empresaDiv = document.createElement('div');
            empresaDiv.className = 'campoItemTarea';

            const label = document.createElement('label');
            label.textContent = 'Empresa(s): ';
            label.style.fontWeight = 'bold';
            label.style.marginRight = '5px';

            const span = document.createElement('span');
            span.textContent = nombresEmpresa.join(' | ');

            empresaDiv.appendChild(label);
            empresaDiv.appendChild(span);
            contenedor.appendChild(empresaDiv);
        }

        for (let campo of campos) {
            if (campo.valor === '__DISTRIBUCION_CC__') continue;
            if (campo.nombre_interno === 'metodo_pago' || campo.nombre_interno === 'fecha_compromiso') continue;

            // === Capturar montos especiales si corresponden
            if (
                (campo.nombre_interno === 'monto_pagar' || campo.nombre_interno === 'monto_aclarar') ||
                campo.etiqueta.toLowerCase().includes('monto a pagar') ||
                campo.etiqueta.toLowerCase().includes('monto a aclarar')
            ) {
                monto_aclaracion.push(campo.valor);
            }

            const div = document.createElement('div');
            div.className = 'campoItemTarea';

            const label = document.createElement('label');
            label.textContent = campo.etiqueta + ': ';
            label.style.marginRight = '5px';

            const valorSpan = document.createElement('span');

            if (typeof campo.valor === 'string' && campo.valor.includes(':::')) {
                const partes = campo.valor.split(':::');
                if (partes.length === 2) {
                    const [nombre, url] = partes;
                    const nombreTruncado = truncate(nombre);
                    valorSpan.appendChild(createAdjuntoDiv(nombreTruncado, url));
                } else if (partes.length === 3) {
                    const [tipo, url, cc_empresa] = partes;
                    const nombreAsociado = mapCCNombres[cc_empresa] || cc_empresa;
                    const nombreArchivo = url.split('/').pop();
                    const nombreTruncado = truncate(nombreArchivo);
                    valorSpan.appendChild(createAdjuntoDiv(nombreTruncado, url, tipo, nombreAsociado));
                } else {
                    valorSpan.textContent = truncate(campo.valor_mostrado);
                }
            } else {
                valorSpan.textContent = truncate(campo.valor_mostrado);
            }

            div.appendChild(label);
            div.appendChild(valorSpan);
            contenedor.appendChild(div);
        }

        if (distribuciones.length > 0) {
            const htmlDistribucion = await cargarDistribucionTarea(nTicket);
            const bloqueDistribucion = document.createElement('div');
            bloqueDistribucion.className = 'campoItemTarea';
            // bloqueDistribucion.innerHTML = `<strong>Distribución del monto total:</strong><br/>${htmlDistribucion}`;
            contenedor.appendChild(bloqueDistribucion);
        }

    } catch (error) {
        console.error("Error al cargar campos personalizados del ticket:", error);
    }
}


async function cargarDistribucionTarea(idTareaServicio) {
    try {
        const result = await ZEN_QUERY({ id: queryDistribucionTarea, parametros: { id_tarea_servicio: idTareaServicio } });
        const distribuciones = Array.isArray(result.result) ? result.result : [];

        if (distribuciones.length === 0) {
            return '<em>No se encontraron distribuciones</em>';
        }

        // Agrupar por empresa
        const agrupado = {};
        let totalGlobal = 0;

        distribuciones.forEach(d => {
            if (!agrupado[d.nombre_empresa]) agrupado[d.nombre_empresa] = [];
            agrupado[d.nombre_empresa].push(d);
            totalGlobal += parseFloat(d.monto);
        });

        let html = `<table class="table table-bordered table-sm mt-3">
            <thead>
                <tr>
                    <th>Empresa</th>
                    <th>Centro de costo</th>
                    <th>Monto</th>
                </tr>
            </thead>
            <tbody>`;

        Object.entries(agrupado).forEach(([empresa, lineas]) => {
            lineas.forEach((linea, index) => {
                html += `<tr>
                    <td>${index === 0 ? empresa : ''}</td>
                    <td>${linea.nombre_centro}</td>
                    <td>$ ${parseFloat(linea.monto).toLocaleString('es-CL')}</td>
                </tr>`;
            });
        });

        html += `<tr>
            <td colspan="2"><strong>Total</strong></td>
            <td><strong>$ ${totalGlobal.toLocaleString('es-CL')}</strong></td>
        </tr>`;

        html += `</tbody></table>`;
        return html;
    } catch (error) {
        console.error("Error en cargarDistribucionTarea:", error);
        throw error;
    }
}

/////////////////////////////////////////////////////////////// CARGAR VALORES DE LOS CAMPOS ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// MANEJO DE ADJUNTOS ///////////////////////////////////////////////////////////////

function handleFileSelect(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            const adjunto = {
                name: file.name,
                size: file.size,
                content: e.target.result.split(',')[1],
                file: file
            };
            adjuntos.push(adjunto);
            insertArchivo(adjunto.name, adjunto.size);
        };
        reader.readAsDataURL(file);
    }
}

function insertArchivo(fileName, fileSize) {
    const containerAdjuntos = document.getElementById('containerAdjuntos');
    const div = document.createElement('div');
    div.className = 'adjunto';
    div.style.display = 'flex';
    div.style.alignItems = 'center';
    div.style.margin = '10px 0';

    const removeBtn = document.createElement('span');
    const removeIcon = document.createElement('i');
    removeIcon.className = 'fa fa-trash';
    removeIcon.style.cursor = 'pointer';
    removeIcon.style.marginRight = '10px';
    removeIcon.addEventListener('click', () => {
        div.remove();
        adjuntos = adjuntos.filter(ad => ad.name !== fileName);
        actualizarNumeroAdjuntos();
    });
    removeBtn.appendChild(removeIcon);

    const nameSpan = document.createElement('span');
    nameSpan.textContent = `${fileName} (${(fileSize / 1024).toFixed(2)} KB)`;
    nameSpan.style.marginRight = '10px';

    div.appendChild(removeBtn);
    div.appendChild(nameSpan);
    containerAdjuntos.appendChild(div);

    actualizarNumeroAdjuntos();
}

function actualizarNumeroAdjuntos() {
    const containerAdjuntos = document.getElementById('containerAdjuntos');
    const labelNumeroAdjuntos = document.getElementById('labelNumeroAdjuntos');
    const numAdjuntos = containerAdjuntos.querySelectorAll('.adjunto').length;
    if (labelNumeroAdjuntos) {
        labelNumeroAdjuntos.textContent = `Adjuntos subidos: ${numAdjuntos}`;
        labelNumeroAdjuntos.style.display = numAdjuntos > 0 ? 'block' : 'none';
    }
}

async function enviarAdjuntos(mensaje_id) {
    const promises = adjuntos.map(adjunto => {
        let formData = new FormData();
        formData.append("Filedata", adjunto.file, adjunto.name);
        formData.append("mensaje_id", mensaje_id);
        return $.ajax({
            url: BASE_URL + 'api/attach_m_modal',
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            method: 'POST',
            type: 'POST',
        });
    });
    await Promise.all(promises);
}

async function uploadFileE(file) {
    const formData = new FormData();
    formData.append('Filedata', file);

    try {
        const response = await fetch('/api/createrecurso', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error('Error al subir el archivo');
        }

        const data = await response.json();
        return data.data[0].url;
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error al subir el archivo.'
        });
        return '';
    }
}

/////////////////////////////////////////////////////////////// MANEJO DE ADJUNTOS ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// RENDERIZADO DE CAMPOS ///////////////////////////////////////////////////////////////

const tipoSolicitud = parseInt(ZEN_DATABEAN.id_tipo_trabajo);

async function cargarTareasPorTipo(tipoSolicitud) {
    const contenedor = document.getElementById('listaCamposTicket');
    contenedor.innerHTML = '';

    try {
        const respTareas = await ZEN_QUERY({ id: queryTareasPorTipo, parametros: { id_tipo_ticket: tipoSolicitud } });
        const tareas = Array.isArray(respTareas.result) ? respTareas.result : [];

        for (let tarea of tareas) {
            const bloqueTarea = document.createElement('div');
            bloqueTarea.classList.add('bloque-tarea');
            bloqueTarea.style.border = '1px solid #ccc';
            bloqueTarea.style.margin = '10px 0';
            bloqueTarea.style.padding = '10px';
            bloqueTarea.setAttribute('data-plantilla-id', tarea.id);
            bloqueTarea.setAttribute('data-motivo-plantilla', tarea.motivo_plantilla || '');
            bloqueTarea.setAttribute('data-descripcion-plantilla', tarea.descripcion_plantilla || '');

            //const titulo = document.createElement('h5');
            //titulo.innerText = tarea.motivo_plantilla;
            //bloqueTarea.appendChild(titulo);

            const desc = document.createElement('p');
            desc.innerText = tarea.descripcion_plantilla ?? '';
            bloqueTarea.appendChild(desc);

            // Bloque múltiple: Empresas y CC
            const wrapper = document.createElement('div');
            wrapper.classList.add('wrapper-multi-empresas');

            const tituloBloque = document.createElement('h6');
            tituloBloque.textContent = '';
            wrapper.appendChild(tituloBloque);

            const filaBtnAgregar = document.createElement('div');
            filaBtnAgregar.className = 'boton-agregar-empresa';

            const btnAgregar = document.createElement('button');
            btnAgregar.type = 'button';
            btnAgregar.className = 'btn btn-sm';
            btnAgregar.textContent = '+ Agregar empresa';
            btnAgregar.addEventListener('click', () => insertarBloqueEmpresa(wrapper));

            filaBtnAgregar.appendChild(btnAgregar);
            wrapper.appendChild(filaBtnAgregar);

            const subContenedor = document.createElement('div');
            subContenedor.id = 'contenedorEmpresas';
            wrapper.appendChild(subContenedor);

            bloqueTarea.appendChild(wrapper);

            insertarBloqueEmpresa(wrapper);

            const contenedorCampos = document.createElement('div');
            contenedorCampos.id = `contenedorCampos_tarea_${tarea.id}`;
            bloqueTarea.appendChild(contenedorCampos);

            contenedor.appendChild(bloqueTarea);

            await cargarCamposTarea(tarea.id, contenedorCampos.id);

            const campoEmpresa = bloqueTarea.querySelector('.campo-personalizado[data-nombre-interno="empresa_paga"]');
            const campoCentroCosto = bloqueTarea.querySelector('.campo-personalizado[data-nombre-interno="centro_costo"]');
            if (campoEmpresa) campoEmpresa.remove();
            if (campoCentroCosto) campoCentroCosto.remove();
        }

        await precargarValoresEditados();
        await preCargarDistribucionDesdeEdicion(window.datosTicketEditado);
        await preCargarAdjuntosDesdeEdicion();
        await preCargarMetodoPagoDesdeEdicion();

    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudieron cargar las tareas del tipo seleccionado.'
        });
    }
}

async function cargarCamposTarea(idTareaPlantilla, contenedorCamposId) {
    try {
        const respCampos = await ZEN_QUERY({ id: queryCamposTarea, parametros: { id_plantilla_tarea: idTareaPlantilla } });
        const campos = Array.isArray(respCampos.result) ? respCampos.result : [];
        window.camposPlantillaActual = campos;
        window.camposYaRenderizados = {};

        for (let campo of campos) {
            await renderCampoFormulario(campo, contenedorCamposId);
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudieron cargar los campos de la plantilla.'
        });
    }
}

async function renderCampoFormulario(campo, contenedorId, forcedWrapper = null) {

    if (!window.camposYaRenderizados) window.camposYaRenderizados = {};
    const camposBloqueados = ['empresa_paga', 'centro_costo'];
    if (camposBloqueados.includes(campo.nombre_interno)) return;

    // Control total de render de documento_adjunto
    if (campo.nombre_interno === 'documento_adjunto') {
        const tieneSelectorTipo = window.camposPlantillaActual?.some(c =>
            c.id_plantilla_tarea === campo.id_plantilla_tarea &&
            c.nombre_interno === 'tipo_documento'
        );

        if (tieneSelectorTipo) {
            if (window.camposYaRenderizados?.[`combo_adjuntos_${campo.id_plantilla_tarea}`]) {
                return;
            }
            const campoTipo = window.camposPlantillaActual?.find(c =>
                c.id_plantilla_tarea === campo.id_plantilla_tarea &&
                c.nombre_interno === 'tipo_documento'
            );
            if (campoTipo) {
                await renderBloqueAdjuntosDinamico(campoTipo, campo, contenedorId);
                window.camposYaRenderizados[`combo_adjuntos_${campo.id_plantilla_tarea}`] = true;
                return;
            }
        } else {
            const contenedor = document.getElementById(contenedorId);
            await renderBloqueArchivosSimples(campo, contenedor);
            return;
        }
    }

    const contenedor = document.getElementById(contenedorId);
    if (!contenedor) return;
    const uniqueSuffix = `_${campo.id}_${Date.now()}`;
    let wrapper = forcedWrapper || document.createElement('div');
    wrapper.classList.add('campo-personalizado');
    wrapper.style.marginBottom = '8px';
    wrapper.setAttribute('data-campo-id', campo.id);
    if (campo.nombre_interno) {
        wrapper.setAttribute('data-nombre-interno', campo.nombre_interno);
    }
    wrapper.setAttribute('data-obligatorio', parseInt(campo.obligatorio) === 1 ? '1' : '0');
    wrapper.setAttribute('data-campo-dependiente-de', campo.id_campo_padre || 0);
    const esObligatorio = parseInt(campo.obligatorio) === 1;
    let labelHTML = `<label>${campo.label || 'Campo'}${esObligatorio ? '<span style="color:red">*</span>' : ''}</label>`;
    const valorPorDefecto = campo.valor_por_defecto || '';
    const tipoCampo = (campo.tipo_componente || '').toLowerCase();
    const nombreInterno = campo.nombre_interno || '';
    const esCampoMonto = ['monto_pagar', 'monto_aclarar'].includes(nombreInterno);

    if (esCampoMonto) {
        window.camposMontoDistribucion = window.camposMontoDistribucion || {};
        const plantillaId = campo.id_plantilla_tarea;
        window.camposMontoDistribucion[plantillaId] = {
            campoId: campo.id,
            inputId: `campo_${campo.id}${uniqueSuffix}`,
            wrapper: wrapper,
            suffix: uniqueSuffix
        };
    }

    const origenDatos = (campo.origen_datos || '').trim();
    let fieldHTML = '';

    if (campo.nombre_interno === 'tipo_documento') {
        const campoAdjunto = window.camposPlantillaActual?.find(c =>
            c.id_plantilla_tarea === campo.id_plantilla_tarea &&
            c.nombre_interno === 'documento_adjunto'
        );
        if (campoAdjunto) {
            await renderBloqueAdjuntosDinamico(campo, campoAdjunto, contenedor);
            window.camposYaRenderizados[`combo_adjuntos_${campo.id_plantilla_tarea}`] = true;
            return;
        }
    }

    if (campo.nombre_interno === 'nombre_socio_negocio') {
        const contenedor = document.getElementById(contenedorId);
        if (!contenedor) return;

        const wrapper = forcedWrapper || document.createElement('div');
        wrapper.classList.add('campo-personalizado');
        wrapper.style.marginBottom = '8px';
        wrapper.setAttribute('data-campo-id', campo.id);
        wrapper.setAttribute('data-nombre-interno', campo.nombre_interno);
        wrapper.setAttribute('data-obligatorio', parseInt(campo.obligatorio) === 1 ? '1' : '0');

        const label = document.createElement('label');
        label.innerHTML = `${campo.label || 'Socio de negocios'} ${parseInt(campo.obligatorio) === 1 ? '<span style="color:red">*</span>' : ''}`;
        wrapper.appendChild(label);

        const select = document.createElement('select');
        select.className = 'form-control form-control-sm';
        select.setAttribute('name', `campo_${campo.id}`);
        if (parseInt(campo.obligatorio) === 1) {
            select.setAttribute('required', 'required');
        }

        const optionDefault = document.createElement('option');
        optionDefault.value = '';
        optionDefault.textContent = '-- Seleccione socio --';
        select.appendChild(optionDefault);

        wrapper.appendChild(select);
        if (!forcedWrapper) contenedor.appendChild(wrapper);

        const resp = await ZEN_QUERY({ id: queryObtenerSocios, parametros: {} });
        const socios = Array.isArray(resp.result) ? resp.result : [];

        socios.forEach(socio => {
            const option = document.createElement('option');
            option.value = socio.nombre;
            option.textContent = `${socio.nombre} <${socio.nombre_empresa}>`;
            option.dataset.rut = socio.identificador;
            option.dataset.banco = socio.banco;
            option.dataset.cta = socio.cta_corriente;
            select.appendChild(option);
        });

        // Evento para autocompletar rut y cuenta corriente
        select.addEventListener('change', () => {
            const selected = select.options[select.selectedIndex];
            const rut = selected?.dataset.rut || '';
            const banco = selected?.dataset.banco || '';
            const cuenta = selected?.dataset.cta || '';

            const wrapperRut = document.querySelector('.campo-personalizado[data-nombre-interno="rut_socio_negocio"]');
            if (wrapperRut) {
                const inputRut = wrapperRut.querySelector('input');
                if (inputRut) {
                    inputRut.value = rut;
                    inputRut.setAttribute('readonly', true);
                }
            }

            const wrapperBanco = document.querySelector('.campo-personalizado[data-nombre-interno="banco_socio_negocio"]');
            if (wrapperBanco) {
                const inputBanco = wrapperBanco.querySelector('input');
                if (inputBanco) {
                    inputBanco.value = banco;
                    inputBanco.setAttribute('readonly', true);
                }
            }


            const wrapperCuenta = document.querySelector('.campo-personalizado[data-nombre-interno="cuenta_corriente"]');
            if (wrapperCuenta) {
                const inputCuenta = wrapperCuenta.querySelector('input');
                if (inputCuenta) {
                    inputCuenta.value = cuenta;
                    inputCuenta.setAttribute('readonly', true);
                }
            }
        });

        return; // ya renderizado, salimos
    }

    if (['select', 'radio', 'checkbox'].includes(tipoCampo) && origenDatos) {
        const padreId = parseInt(campo.id_campo_padre || 0);
        if (padreId > 0) {
            const padreWrapper = contenedor.querySelector(`.campo-personalizado[data-campo-id="${padreId}"]`);
            if (!padreWrapper) {
                fieldHTML = `<select class="form-control form-control-sm" disabled>
                  <option value="">(No se encontró el campo padre ID=${padreId} aún)</option>
                </select>`;
                wrapper.innerHTML = labelHTML + fieldHTML;
                if (!forcedWrapper) contenedor.appendChild(wrapper);
                return;
            }
            const valorPadre = obtenerValorCampoPadre(padreWrapper);
            if (!valorPadre) {
                fieldHTML = `<select class="form-control form-control-sm" disabled>
                  <option value="">-- Seleccione primero una empresa --</option>
                </select>`;
                wrapper.innerHTML = labelHTML + fieldHTML;
                if (!forcedWrapper) contenedor.appendChild(wrapper);
                vincularEventoCambioPadre(padreWrapper, campo, wrapper);
                return;
            }
            let restId = 0;
            if (origenDatos === 'empresas') restId = queryEmpresas;
            if (origenDatos === 'catalogo_centros_costos') restId = queryCentrosCostos;
            if (restId > 0) {
                const respData = await ZEN_QUERY({
                    id: restId,
                    parametros: { valor_padre: valorPadre }
                });
                let listaDin = Array.isArray(respData.result) ? respData.result : [];
                if (origenDatos === 'catalogo_centros_costos') {
                    listaDin.unshift({ valor_opcion: '__DISTRIBUCION_CC__', etiqueta_opcion: 'Distribución por CC' });
                    window.listaCC = listaDin.filter(cc => cc.valor_opcion !== '__DISTRIBUCION_CC__');
                }
                fieldHTML = generarHTMLCampoDinamico(tipoCampo, campo.id, listaDin, valorPorDefecto, esObligatorio, uniqueSuffix);
                if (origenDatos === 'catalogo_centros_costos' && tipoCampo === 'select') {
                    const distribId = `bloqueDistribucion_${campo.id}${uniqueSuffix}`;
                    fieldHTML +=
                        `<div id="${distribId}" class="bloque-distribucion-cc" style="margin-top:10px; border:1px dashed #007866; padding:10px; display:none;">
                            <button type="button" class="btn btn-sm btn-outline-info mb-2" id="btnAgregarLinea_${campo.id}${uniqueSuffix}">+ Agregar CC</button>
                            <div id="tablaDistribucion_${campo.id}${uniqueSuffix}"></div>
                            <div style="margin-top:8px;"><strong>Total: <span id="totalDistribucion_${campo.id}${uniqueSuffix}">$ 0</span></strong></div>
                        </div>`;
                }
            } else {
                fieldHTML = `<p style="color:red;font-size:13px;">(origen_datos="${origenDatos}" no soportado en anidado)</p>`;
            }
            wrapper.innerHTML = labelHTML + fieldHTML;
            if (!forcedWrapper) contenedor.appendChild(wrapper);
            vincularEventoCambioPadre(padreWrapper, campo, wrapper);
            if (origenDatos === 'catalogo_centros_costos' && tipoCampo === 'select') {
                setTimeout(() => {
                    const selectorCC = wrapper.querySelector(`#campo_${campo.id}${uniqueSuffix}`);
                    const bloque = document.getElementById(`bloqueDistribucion_${campo.id}${uniqueSuffix}`);
                    if (!selectorCC || !bloque) return;
                    selectorCC.addEventListener('change', () => {
                        if (selectorCC.value === '__DISTRIBUCION_CC__') {
                            bloque.style.setProperty('display', 'block', 'important');
                        } else {
                            bloque.style.display = 'none';
                            document.getElementById(`tablaDistribucion_${campo.id}${uniqueSuffix}`).innerHTML = '';
                            document.getElementById(`totalDistribucion_${campo.id}${uniqueSuffix}`).innerText = '$ 0';
                            if (window.camposMontoDistribucion && window.camposMontoDistribucion[campo.id_plantilla_tarea]) {
                                const inputId = window.camposMontoDistribucion[campo.id_plantilla_tarea].inputId;
                                const campoMonto = document.getElementById(inputId);
                                if (campoMonto) {
                                    campoMonto.removeAttribute('readonly');
                                }
                            }
                        }
                    });
                    if (valorPorDefecto === '__DISTRIBUCION_CC__') {
                        bloque.style.setProperty('display', 'block', 'important');
                    }
                    const btnAgregar = wrapper.querySelector(`#btnAgregarLinea_${campo.id}${uniqueSuffix}`);
                    btnAgregar.addEventListener('click', () => {
                        const tabla = document.getElementById(`tablaDistribucion_${campo.id}${uniqueSuffix}`);
                        const totalSpan = document.getElementById(`totalDistribucion_${campo.id}${uniqueSuffix}`);
                        const selectsEnLineas = tabla.querySelectorAll('select.sel-cc-linea');
                        const seleccionados = Array.from(selectsEnLineas).map(sel => sel.value);
                        const disponibles = window.listaCC.filter(cc => !seleccionados.includes(cc.valor_opcion));

                        if (disponibles.length === 0) {
                            Swal.fire('Aviso', 'No hay más centros de costo disponibles para distribuir.', 'warning');
                            return;
                        }

                        const nuevaLinea = document.createElement('div');
                        nuevaLinea.className = 'linea-distribucion row mb-2';
                        nuevaLinea.innerHTML =
                            `<div class="col-md-7">
                                <select class="form-control form-control-sm sel-cc-linea">
                                    <option value="">-- Seleccione CC --</option>
                                    ${disponibles.map(cc => `<option value="${cc.valor_opcion}">${cc.etiqueta_opcion}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="number" class="form-control form-control-sm input-monto-linea" min="0" value="0" step="any" placeholder="Monto $">
                            </div>
                            <div class="col-md-2 text-end">
                                <button class="btn btn-sm btn-danger btnEliminarLinea"><i class="fa fa-trash"></i></button>
                            </div>`;

                        tabla.appendChild(nuevaLinea);

                        nuevaLinea.querySelector('.btnEliminarLinea').addEventListener('click', () => {
                            nuevaLinea.remove();
                            actualizarOpcionesDistribucion(tabla);
                            actualizarTotalDistribucionMonto(tabla, totalSpan, campo.id_plantilla_tarea);
                        });

                        nuevaLinea.querySelectorAll('select, input').forEach(el => {
                            el.addEventListener('change', () => {
                                actualizarOpcionesDistribucion(tabla);
                                actualizarTotalDistribucionMonto(tabla, totalSpan, campo.id_plantilla_tarea);
                            });
                        });

                        actualizarOpcionesDistribucion(tabla);
                        actualizarTotalDistribucionMonto(tabla, totalSpan, campo.id_plantilla_tarea);
                    });
                }, 50);
            }
        } else {
            if (origenDatos === 'catalogo_centros_costos' && tipoCampo === 'select') {
                const respData = await ZEN_QUERY({ id: queryCentrosCostos, parametros: {} });
                let listaCC = Array.isArray(respData.result) ? respData.result : [];
                listaCC.unshift({ valor_opcion: '__DISTRIBUCION_CC__', etiqueta_opcion: 'Distribución por CC' });
                window.listaCC = listaCC.filter(cc => cc.valor_opcion !== '__DISTRIBUCION_CC__');
                fieldHTML += `<select class="form-control form-control-sm" id="campo_${campo.id}${uniqueSuffix}" name="campo_${campo.id}${uniqueSuffix}" ${esObligatorio ? 'required' : ''}>`;
                fieldHTML += `<option value="">-- Seleccione --</option>`;
                listaCC.forEach(cc => {
                    const selected = (valorPorDefecto === String(cc.valor_opcion)) ? 'selected' : '';
                    fieldHTML += `<option value="${cc.valor_opcion}" ${selected}>${cc.etiqueta_opcion}</option>`;
                });
                fieldHTML += `</select>`;
                const distribId = `bloqueDistribucion_${campo.id}${uniqueSuffix}`;
                fieldHTML +=
                    `<div id="${distribId}" class="bloque-distribucion-cc" style="margin-top:10px; border:1px dashed #007866; padding:10px; display:none;">
                        <button type="button" class="btn btn-sm btn-outline-info mb-2" id="btnAgregarLinea_${campo.id}${uniqueSuffix}">+ Agregar CC</button>
                        <div id="tablaDistribucion_${campo.id}${uniqueSuffix}"></div>
                        <div style="margin-top:8px;"><strong>Total: <span id="totalDistribucion_${campo.id}${uniqueSuffix}">$ 0</span></strong></div>
                    </div>`;
                wrapper.innerHTML = labelHTML + fieldHTML;
                if (!forcedWrapper) contenedor.appendChild(wrapper);
                setTimeout(() => {
                    const selectorCC = wrapper.querySelector(`#campo_${campo.id}${uniqueSuffix}`);
                    const bloque = document.getElementById(distribId);
                    if (!selectorCC || !bloque) return;
                    selectorCC.addEventListener('change', () => {
                        const valor = selectorCC.value;
                        if (valor === '__DISTRIBUCION_CC__') {
                            bloque.style.setProperty('display', 'block', 'important');
                        } else {
                            bloque.style.display = 'none';
                            document.getElementById(`tablaDistribucion_${campo.id}${uniqueSuffix}`).innerHTML = '';
                            document.getElementById(`totalDistribucion_${campo.id}${uniqueSuffix}`).innerText = '$ 0';
                            if (window.camposMontoDistribucion && window.camposMontoDistribucion[campo.id_plantilla_tarea]) {
                                const inputId = window.camposMontoDistribucion[campo.id_plantilla_tarea].inputId;
                                const campoMonto = document.getElementById(inputId);
                                if (campoMonto) {
                                    campoMonto.removeAttribute('readonly');
                                }
                            }
                        }
                    });
                    if (valorPorDefecto === '__DISTRIBUCION_CC__') {
                        bloque.style.setProperty('display', 'block', 'important');
                    }
                    const btnAgregar = wrapper.querySelector(`#btnAgregarLinea_${campo.id}${uniqueSuffix}`);
                    btnAgregar.addEventListener('click', () => {
                        const tabla = document.getElementById(`tablaDistribucion_${campo.id}${uniqueSuffix}`);
                        const totalSpan = document.getElementById(`totalDistribucion_${campo.id}${uniqueSuffix}`);
                        const selectsEnLineas = tabla.querySelectorAll('select.sel-cc-linea');
                        const seleccionados = Array.from(selectsEnLineas).map(sel => sel.value);
                        const disponibles = window.listaCC.filter(cc => !seleccionados.includes(cc.valor_opcion));

                        if (disponibles.length === 0) {
                            Swal.fire('Aviso', 'No hay más centros de costo disponibles para distribuir.', 'warning');
                            return;
                        }

                        const nuevaLinea = document.createElement('div');
                        nuevaLinea.className = 'linea-distribucion row mb-2';
                        nuevaLinea.innerHTML =
                            `<div class="col-md-7">
                                <select class="form-control form-control-sm sel-cc-linea">
                                    <option value="">-- Seleccione CC --</option>
                                    ${disponibles.map(cc => `<option value="${cc.valor_opcion}">${cc.etiqueta_opcion}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="number" class="form-control form-control-sm input-monto-linea" min="0" value="0" step="any" placeholder="Monto $">
                            </div>
                            <div class="col-md-2 text-end">
                                <button class="btn btn-sm btn-danger btnEliminarLinea"><i class="fa fa-trash"></i></button>
                            </div>`;

                        tabla.appendChild(nuevaLinea);

                        nuevaLinea.querySelector('.btnEliminarLinea').addEventListener('click', () => {
                            nuevaLinea.remove();
                            actualizarOpcionesDistribucion(tabla);
                            actualizarTotalDistribucionMonto(tabla, totalSpan, campo.id_plantilla_tarea);
                        });

                        nuevaLinea.querySelectorAll('select, input').forEach(el => {
                            el.addEventListener('change', () => {
                                actualizarOpcionesDistribucion(tabla);
                                actualizarTotalDistribucionMonto(tabla, totalSpan, campo.id_plantilla_tarea);
                            });
                        });

                        actualizarOpcionesDistribucion(tabla);
                        actualizarTotalDistribucionMonto(tabla, totalSpan, campo.id_plantilla_tarea);
                    });

                }, 50);
            } else {
                let restId = 0;
                if (origenDatos === 'empresas') restId = queryEmpresas;
                if (restId > 0) {
                    const respData = await ZEN_QUERY({ id: restId, parametros: {} });
                    const listaDin = Array.isArray(respData.result) ? respData.result : [];
                    fieldHTML = generarHTMLCampoDinamico(tipoCampo, campo.id, listaDin, valorPorDefecto, esObligatorio, uniqueSuffix);
                } else {
                    fieldHTML = `<p style="color:red;font-size:13px;">(origen="${origenDatos}" no soportado)</p>`;
                }
                wrapper.innerHTML = labelHTML + fieldHTML;
                if (!forcedWrapper) contenedor.appendChild(wrapper);
            }
        }
    } else if (['select', 'radio', 'checkbox'].includes(tipoCampo) && !origenDatos) {
        const opcionesResp = await ZEN_QUERY({ id: queryOpcionesCampo, parametros: { id_plantilla_campo: campo.id } });
        const opciones = Array.isArray(opcionesResp.result) ? opcionesResp.result : [];
        fieldHTML = generarHTMLCampoEstatico(tipoCampo, campo.id, opciones, valorPorDefecto, esObligatorio, uniqueSuffix);
        wrapper.innerHTML = labelHTML + fieldHTML;
        if (!forcedWrapper) contenedor.appendChild(wrapper);
    } else {
        fieldHTML = generarHTMLCampoBasico(tipoCampo, campo.id, valorPorDefecto, esObligatorio, uniqueSuffix);
        wrapper.innerHTML = labelHTML + fieldHTML;
        if (!forcedWrapper) contenedor.appendChild(wrapper);
    }

    if (tipoCampo === 'file') {
        if (
            nombreInterno === 'documento_adjunto' &&
            window.camposPlantillaActual?.some(c =>
                c.id_plantilla_tarea === campo.id_plantilla_tarea &&
                c.nombre_interno === 'tipo_documento'
            )
        ) {
            const wrapperId = `wrapperDocumentoAdjunto_${campo.id}${uniqueSuffix}`;
            fieldHTML = `
                <div id="${wrapperId}" class="bloque-archivo-dinamico">
                    <button type="button" class="btn btn-sm btn-outline-info mb-2" id="btnAgregarArchivo_${campo.id}${uniqueSuffix}">+ Agregar documento</button>
                    <div id="tablaArchivos_${campo.id}${uniqueSuffix}"></div>
                </div>
            `;
            wrapper.innerHTML = labelHTML + fieldHTML;
            if (!forcedWrapper) contenedor.appendChild(wrapper);

            setTimeout(() => {
                const tabla = document.getElementById(`tablaArchivos_${campo.id}${uniqueSuffix}`);
                const btnAgregar = document.getElementById(`btnAgregarArchivo_${campo.id}${uniqueSuffix}`);
                if (!tabla || !btnAgregar) return;
                btnAgregar.addEventListener('click', () => {
                    agregarLineaArchivo(campo.id, tabla);
                });
                agregarLineaArchivo(campo.id, tabla);
            }, 50);

            return;
        } else {
            await renderBloqueArchivosSimples(campo, contenedor);
            window.camposYaRenderizados[`combo_adjuntos_${campo.id_plantilla_tarea}`] = true;
            return;
        }
    }
}

function actualizarOpcionesDistribucion(tabla) {
    const selects = tabla.querySelectorAll('select.sel-cc-linea');
    const seleccionados = Array.from(selects).map(sel => sel.value).filter(val => val !== '');
    selects.forEach(sel => {
        const currentVal = sel.value;
        sel.innerHTML = '<option value="">-- Seleccione CC --</option>';
        if (window.listaCC && Array.isArray(window.listaCC)) {
            window.listaCC
                .filter(cc => (cc.valor_opcion === currentVal) || (!seleccionados.includes(cc.valor_opcion)))
                .forEach(cc => {
                    const opt = document.createElement('option');
                    opt.value = cc.valor_opcion;
                    opt.textContent = cc.etiqueta_opcion;
                    if (cc.valor_opcion === currentVal) opt.selected = true;
                    sel.appendChild(opt);
                });
        }
    });
}

function actualizarTotalDistribucionMonto(tabla, totalSpan, plantillaId) {
    const inputs = tabla.querySelectorAll('input.input-monto-linea');
    let total = 0;
    inputs.forEach(inp => {
        total += parseFloat(inp.value || 0);
    });

    // Actualiza visual
    totalSpan.innerText = `$${total.toLocaleString('es-CL', { minimumFractionDigits: 0 })}`;

    // Si hay campo monto asociado a esta plantilla, lo actualizamos también
    if (window.camposMontoDistribucion && window.camposMontoDistribucion[plantillaId]) {
        const inputId = window.camposMontoDistribucion[plantillaId].inputId;
        const campoInput = document.getElementById(inputId);
        if (campoInput) {
            campoInput.value = total;
            campoInput.setAttribute('readonly', 'readonly');
        }
    }
}

function actualizarTotalDistribucion(tabla, totalSpan) {
    const inputs = tabla.querySelectorAll('input.input-monto-linea');
    let total = 0;
    inputs.forEach(inp => {
        total += parseFloat(inp.value || 0);
    });

    totalSpan.innerText = `$${total.toLocaleString('es-CL')}`;
    totalSpan.style.color = 'black';

    // Buscar wrapper con nombre_interno = monto_pagar o monto_aclarar
    const wrapperMonto = document.querySelector(
        '.campo-personalizado[data-nombre-interno="monto_pagar"], .campo-personalizado[data-nombre-interno="monto_aclarar"]'
    );

    if (wrapperMonto) {
        // Buscar input tipo number con name que comience con "campo_"
        const inputMonto = wrapperMonto.querySelector('input[type="number"][name^="campo_"]');
        if (inputMonto) {
            inputMonto.value = total;
            inputMonto.setAttribute('readonly', true);
        }
    }
}

function vincularEventoCambioPadre(padreWrapper, campoHijo, wrapperHijo) {
    const inputsPadre = padreWrapper.querySelectorAll('select, input[type="radio"], input[type="checkbox"], input[type="text"], textarea');
    inputsPadre.forEach(inp => {
        inp.addEventListener('change', async () => {
            const contenedor = wrapperHijo.parentElement;
            if (!contenedor) return;
            const nuevoWrapper = document.createElement('div');
            await renderCampoFormulario(campoHijo, contenedor.id, nuevoWrapper);
            wrapperHijo.replaceWith(nuevoWrapper);
        });
    });
}

function obtenerValorCampoPadre(padreWrapper) {
    const sel = padreWrapper.querySelector('select');
    if (sel) return sel.value || '';
    const radioSel = padreWrapper.querySelector('input[type="radio"]:checked');
    if (radioSel) return radioSel.value || '';
    const chk = padreWrapper.querySelector('input[type="checkbox"]:checked');
    if (chk) return chk.value || '';
    const inputEl = padreWrapper.querySelector('input, textarea');
    if (inputEl) return inputEl.value || '';
    return '';
}

function generarHTMLCampoDinamico(tipoCampo, campoId, listaDin, valorPorDefecto, esObligatorio, suffix = '') {
    let html = '';
    if (tipoCampo === 'select') {
        html += `<select id="campo_${campoId}${suffix}" class="form-control form-control-sm" name="campo_${campoId}${suffix}" ${esObligatorio ? 'required' : ''}>`;
        html += `<option value="">-- Seleccione --</option>`;
        listaDin.forEach(item => {
            const selected = (valorPorDefecto === String(item.valor_opcion)) ? 'selected' : '';
            html += `<option value="${item.valor_opcion}" ${selected}>${item.etiqueta_opcion}</option>`;
        });
        html += `</select>`;
        if (listaDin.some(item => item.valor_opcion === '__DISTRIBUCION_CC__')) {
            const distribId = `bloqueDistribucion_${campoId}${suffix}`;
            const tablaId = `tablaDistribucion_${campoId}${suffix}`;
            const totalId = `totalDistribucion_${campoId}${suffix}`;
            const btnId = `btnAgregarLinea_${campoId}${suffix}`;

            html += `
            <div id="${distribId}" class="bloque-distribucion-cc" style="margin-top:10px; border:1px dashed #007866; padding:10px; display:none;">
                <button type="button" class="btn btn-sm btn-outline-info mb-2" id="${btnId}">+ Agregar CC</button>
                <div id="${tablaId}"></div>
                <div style="margin-top:8px;">
                    <strong>Total monto: <span id="${totalId}">$0</span></strong>
                </div>
            </div>`;
        }

    } else if (tipoCampo === 'radio') {
        listaDin.forEach(item => {
            const checked = (valorPorDefecto === String(item.valor_opcion)) ? 'checked' : '';
            html += `<div class="form-check form-check-inline">
          <input class="form-check-input" type="radio" name="campo_${campoId}${suffix}" value="${item.valor_opcion}" id="radio_${campoId}${suffix}_${item.valor_opcion}" ${checked} ${esObligatorio ? 'required' : ''}>
          <label class="form-check-label" for="radio_${campoId}${suffix}_${item.valor_opcion}">${item.etiqueta_opcion}</label>
        </div>`;
        });
    } else if (tipoCampo === 'checkbox') {
        listaDin.forEach(item => {
            const isChecked = valorPorDefecto.split(',').includes(String(item.valor_opcion)) ? 'checked' : '';
            html += `<div class="form-check form-check-inline">
          <input class="form-check-input" type="checkbox" name="campo_${campoId}${suffix}[]" value="${item.valor_opcion}" id="chk_${campoId}${suffix}_${item.valor_opcion}" ${isChecked}>
          <label class="form-check-label" for="chk_${campoId}${suffix}_${item.valor_opcion}">${item.etiqueta_opcion}</label>
        </div>`;
        });
    }
    return html;
}

function generarHTMLCampoEstatico(tipoCampo, campoId, opciones, valorPorDefecto, esObligatorio, suffix = '') {
    let html = '';
    if (tipoCampo === 'select') {
        html += `<select class="form-control form-control-sm" name="campo_${campoId}${suffix}" ${esObligatorio ? 'required' : ''}>`;
        html += `<option value="">-- Seleccione --</option>`;
        opciones.forEach(op => {
            const selected = (valorPorDefecto === op.valor_opcion) ? 'selected' : '';
            html += `<option value="${op.valor_opcion}" ${selected}>${op.etiqueta_opcion}</option>`;
        });
        html += `</select>`;
    } else if (tipoCampo === 'radio') {
        opciones.forEach(op => {
            const checked = (valorPorDefecto === op.valor_opcion) ? 'checked' : '';
            html += `<div class="form-check form-check-inline">
      <input class="form-check-input" type="radio" name="campo_${campoId}${suffix}" value="${op.valor_opcion}" id="radio_${campoId}${suffix}_${op.id}" ${checked} ${esObligatorio ? 'required' : ''}>
      <label class="form-check-label" for="radio_${campoId}${suffix}_${op.id}">${op.etiqueta_opcion}</label>
    </div>`;
        });
    } else if (tipoCampo === 'checkbox') {
        opciones.forEach(op => {
            const isChecked = valorPorDefecto.split(',').includes(op.valor_opcion) ? 'checked' : '';
            html += `<div class="form-check form-check-inline">
      <input class="form-check-input" type="checkbox" name="campo_${campoId}${suffix}[]" value="${op.valor_opcion}" id="chk_${campoId}${suffix}_${op.id}" ${isChecked}>
      <label class="form-check-label" for="chk_${campoId}${suffix}_${op.id}">${op.etiqueta_opcion}</label>
    </div>`;
        });
    }
    return html;
}

function generarHTMLCampoBasico(tipoCampo, campoId, valorPorDefecto, esObligatorio, suffix = '') {
    let html = '';
    switch (tipoCampo) {
        case 'text':
            html = `<input type="text" class="form-control form-control-sm" name="campo_${campoId}${suffix}" value="${valorPorDefecto}" ${esObligatorio ? 'required' : ''}>`;
            break;
        case 'textarea':
            html = `<textarea class="form-control form-control-sm" name="campo_${campoId}${suffix}" rows="3" ${esObligatorio ? 'required' : ''}>${valorPorDefecto}</textarea>`;
            break;
        case 'file':
            html = `
            <div class="adjunto-linea-simple">
                <input type="file" id="upload_subirArchivo_${campoId}${suffix}" class="form-control-file input-upload-archivo" />
                <input type="hidden" id="id_upload_subirArchivo_${campoId}${suffix}" name="id_upload_subirArchivo_${campoId}${suffix}" value="${valorPorDefecto}">
            </div>`;
            break;
        case 'date':
            html = `<input type="date" class="form-control form-control-sm" name="campo_${campoId}${suffix}" value="${valorPorDefecto}" ${esObligatorio ? 'required' : ''}>`;
            break;
        case 'int':
            html = `<input type="number" class="form-control form-control-sm" name="campo_${campoId}${suffix}" step="1" value="${valorPorDefecto}" ${esObligatorio ? 'required' : ''}>`;
            break;
        case 'decimal':
            html = `<input type="number" id="campo_${campoId}${suffix}" class="form-control form-control-sm" name="campo_${campoId}${suffix}" step="any" value="${valorPorDefecto}" ${esObligatorio ? 'required' : ''}>`;
            break;
        default:
            html = `<input type="text" class="form-control form-control-sm" name="campo_${campoId}${suffix}" value="${valorPorDefecto}" ${esObligatorio ? 'required' : ''}>`;
            break;
    }
    return html;
}

function agregarLineaArchivo(campoId, tablaContenedor, opcionesTipoDoc = []) {
    const timestamp = Date.now();
    const suffix = `_${campoId}_${timestamp}`;

    const linea = document.createElement('div');
    linea.className = 'linea-archivo row mb-2 align-items-center';
    linea.innerHTML = `
        <div class="col-md-5">
            <select class="form-control form-control-sm select-tipo-doc">
                <option value="">-- Tipo de documento --</option>
                ${opcionesTipoDoc.map(op => `<option value="${op.valor_opcion}">${op.etiqueta_opcion}</option>`).join('')}
            </select>
        </div>
        <div class="col-md-5">
            <input type="file" id="upload_subirArchivo_${campoId}${suffix}" class="form-control-file input-upload-archivo" />
            <input type="hidden" id="id_upload_subirArchivo_${campoId}${suffix}" name="id_upload_subirArchivo_${campoId}${suffix}" value="">
        </div>
        <div class="col-md-2 text-end d-flex align-items-start">
            <button class="btn btn-sm btn-danger btnEliminarLineaArchivo" title="Eliminar archivo"><i class="fa fa-trash"></i></button>
        </div>
    `;

    tablaContenedor.appendChild(linea);

    const btnEliminar = linea.querySelector('.btnEliminarLineaArchivo');
    if (btnEliminar) {
        btnEliminar.addEventListener('click', () => {
            linea.remove();
        });
    }

    const fileInput = linea.querySelector(`#upload_subirArchivo_${campoId}${suffix}`);
    const hiddenInput = linea.querySelector(`#id_upload_subirArchivo_${campoId}${suffix}`);

    if (fileInput) {
        fileInput.addEventListener('change', async () => {
            if (fileInput.files.length > 0) {
                const file = fileInput.files[0];
                const url = await uploadFileE(file);
                if (url) {
                    hiddenInput.value = url;
                    Swal.fire('Éxito', 'Archivo subido correctamente.', 'success');
                } else {
                    hiddenInput.value = '';
                    fileInput.value = '';
                    Swal.fire('Error', 'No se pudo subir el archivo.', 'error');
                }
            }
        });
    }
}

async function renderBloqueAdjuntosDinamico(campoTipo, campoArchivo, contenedor) {
    const uniqueKey = `bloqueAdjuntos_${campoTipo.id}_${Date.now()}`;
    const wrapper = document.createElement('div');
    wrapper.classList.add('campo-personalizado', 'bloque-adjuntos-dinamico');
    wrapper.style.border = '1px dashed #0a5d6b';
    wrapper.style.padding = '10px';
    wrapper.style.marginBottom = '15px';
    wrapper.setAttribute('data-nombre-interno', 'documento_adjunto_dinamico');
    wrapper.setAttribute('data-campo-id', campoArchivo.id);
    wrapper.setAttribute('data-obligatorio', parseInt(campoArchivo.obligatorio) === 1 ? '1' : '0');

    const label = document.createElement('label');
    label.innerHTML = `${campoArchivo.label} ${parseInt(campoArchivo.obligatorio) === 1 ? '<span style="color:red">*</span>' : ''}`;
    wrapper.appendChild(label);

    const contenedorLineas = document.createElement('div');
    contenedorLineas.id = `contenedor_lineas_${uniqueKey}`;
    wrapper.appendChild(contenedorLineas);

    const btnAgregar = document.createElement('button');
    btnAgregar.className = 'btn btn-sm btn-outline-info mt-2';
    btnAgregar.type = 'button';
    btnAgregar.innerHTML = '+ Agregar documento';
    wrapper.appendChild(btnAgregar);

    const opcionesResp = await ZEN_QUERY({ id: queryOpcionesCampo, parametros: { id_plantilla_campo: campoTipo.id } });
    const opciones = Array.isArray(opcionesResp.result) ? opcionesResp.result : [];

    if (!window.selectoresCCPorPlantilla) window.selectoresCCPorPlantilla = {};
    if (!window.selectoresCCPorPlantilla[campoTipo.id]) window.selectoresCCPorPlantilla[campoTipo.id] = [];

    const agregarLinea = () => {
        const linea = document.createElement('div');
        linea.className = 'row mb-2 linea-bloque-adjunto align-items-center';

        linea.innerHTML = `
            <div class="col-md-4">
                <select class="form-control form-control-sm select-tipo-doc">
                    <option value="">-- Tipo de documento --</option>
                    ${opciones.map(op => `<option value="${op.valor_opcion}">${op.etiqueta_opcion}</option>`).join('')}
                </select>
            </div>
            <div class="col-md-4">
                <select class="form-control form-control-sm select-cc-asociado">
                    <option value="">-- Asociar a CC --</option>
                </select>
            </div>
            <div class="col-md-3 d-flex align-items-center">
                <label class="btn btn-sm btn-outline-secondary mb-0 me-2">
                    <i class="fa fa-paperclip"></i>
                    <input type="file" class="d-none input-file-doc" accept="image/*,application/pdf">
                </label>
                <span class="nombre-archivo" style="font-size: 0.85rem;"></span>
                <input type="hidden" class="input-url-doc" />
            </div>
            <div class="col-md-1 text-end">
                <button type="button" class="btn btn-sm btn-danger btnEliminarLinea"><i class="fa fa-trash"></i></button>
            </div>
        `;

        contenedorLineas.appendChild(linea);

        const selectCC = linea.querySelector('.select-cc-asociado');
        const btnEliminar = linea.querySelector('.btnEliminarLinea');

        // Registrar selector para actualización global
        window.selectoresCCPorPlantilla[campoTipo.id].push(selectCC);
        actualizarSelectoresCC(); // Llenar opciones al momento de agregar

        // Eliminar línea y desregistrar selector
        btnEliminar.addEventListener('click', () => {
            linea.remove();
            const index = window.selectoresCCPorPlantilla[campoTipo.id].indexOf(selectCC);
            if (index !== -1) window.selectoresCCPorPlantilla[campoTipo.id].splice(index, 1);
        });

        const fileInput = linea.querySelector('.input-file-doc');
        const urlInput = linea.querySelector('.input-url-doc');
        const labelNombre = linea.querySelector('.nombre-archivo');

        fileInput.addEventListener('change', async () => {
            const file = fileInput.files[0];
            if (file) {
                labelNombre.textContent = 'Subiendo...';
                const url = await uploadFileE(file);
                if (url) {
                    urlInput.value = url;
                    labelNombre.textContent = file.name;
                    Swal.fire({ icon: 'success', title: 'Archivo subido', text: file.name });
                } else {
                    urlInput.value = '';
                    labelNombre.textContent = '';
                    Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo subir el archivo' });
                }
            }
        });
    };

    agregarLinea();
    btnAgregar.addEventListener('click', agregarLinea);
    contenedor.appendChild(wrapper);
}

async function renderBloqueArchivosSimples(campo, contenedor) {
    const uniqueKey = `bloqueArchivos_${campo.id}_${Date.now()}`;

    const wrapper = document.createElement('div');
    wrapper.classList.add('campo-personalizado', 'bloque-archivos-simples');
    wrapper.style.border = '1px dashed #0066cc';
    wrapper.style.padding = '10px';
    wrapper.style.marginBottom = '15px';
    wrapper.setAttribute('data-nombre-interno', campo.nombre_interno || '');
    wrapper.setAttribute('data-campo-id', campo.id);
    wrapper.setAttribute('data-obligatorio', parseInt(campo.obligatorio) === 1 ? '1' : '0');

    const label = document.createElement('label');
    label.innerHTML = `${campo.label} ${parseInt(campo.obligatorio) === 1 ? '<span style="color:red">*</span>' : ''}`;
    wrapper.appendChild(label);

    const contenedorLineas = document.createElement('div');
    contenedorLineas.id = `contenedor_lineas_${uniqueKey}`;
    wrapper.appendChild(contenedorLineas);

    const btnAgregar = document.createElement('button');
    btnAgregar.className = 'btn btn-sm btn-outline-info mt-2';
    btnAgregar.type = 'button';
    btnAgregar.innerHTML = '+ Agregar archivo';
    wrapper.appendChild(btnAgregar);

    const agregarLinea = () => {
        const listaCC = Array.isArray(window.listaCCSolicitud) ? window.listaCCSolicitud : [];

        const linea = document.createElement('div');
        linea.className = 'row mb-2 linea-bloque-archivo align-items-center';

        linea.innerHTML = `
            <div class="col-md-4">
                <select class="form-control form-control-sm select-cc-asociado">
                    <option value="">-- Asociar a CC --</option>
                    ${listaCC.map(cc => `
                        <option value="${cc.idCentroCosto}___${cc.idEmpresa}">
                            ${cc.nombreCentro} <${cc.nombreEmpresa}>
                        </option>
                    `).join('')}
                </select>
            </div>
            <div class="col-md-6 d-flex align-items-center">
                <label class="btn btn-sm btn-outline-secondary mb-0 me-2">
                    <i class="fa fa-paperclip"></i>
                    <input type="file" class="d-none input-file-solo" accept="image/*,application/pdf">
                </label>
                <span class="nombre-archivo" style="font-size: 0.85rem;"></span>
                <input type="hidden" class="input-url-archivo" />
            </div>
            <div class="col-md-2 text-end">
                <button type="button" class="btn btn-sm btn-danger btnEliminarLinea"><i class="fa fa-trash"></i></button>
            </div>
        `;

        contenedorLineas.appendChild(linea);

        linea.querySelector('.btnEliminarLinea').addEventListener('click', () => {
            linea.remove();
        });

        const fileInput = linea.querySelector('.input-file-solo');
        const urlInput = linea.querySelector('.input-url-archivo');
        const labelNombre = linea.querySelector('.nombre-archivo');

        fileInput.addEventListener('change', async () => {
            const file = fileInput.files[0];
            if (file) {
                labelNombre.textContent = 'Subiendo...';
                const url = await uploadFileE(file);
                if (url) {
                    urlInput.value = url;
                    labelNombre.textContent = file.name;
                    Swal.fire({ icon: 'success', title: 'Archivo subido', text: file.name });
                } else {
                    urlInput.value = '';
                    labelNombre.textContent = '';
                    Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo subir el archivo' });
                }
            }
        });

        const selectorCC = linea.querySelector('.select-cc-asociado');
        if (!window.selectoresCCPorPlantilla) window.selectoresCCPorPlantilla = {};
        if (!window.selectoresCCPorPlantilla[campo.id]) window.selectoresCCPorPlantilla[campo.id] = [];
        window.selectoresCCPorPlantilla[campo.id].push(selectorCC);
    };

    agregarLinea();
    btnAgregar.addEventListener('click', agregarLinea);

    contenedor.appendChild(wrapper);
}

async function insertarBloqueEmpresa(wrapper) {
    const contenedor = wrapper.querySelector('#contenedorEmpresas');

    const bloqueWrapper = document.createElement('div');
    bloqueWrapper.className = 'col-12 mb-3';

    const bloque = document.createElement('div');
    bloque.className = 'bloque-empresa-cc row p-3';

    // === Columna: Empresa ===
    const colEmpresa = document.createElement('div');
    colEmpresa.className = 'col-md-4';

    const labelEmpresa = document.createElement('label');
    labelEmpresa.className = 'form-label';
    labelEmpresa.innerHTML = 'Empresa<span class="text-danger">*</span>';
    colEmpresa.appendChild(labelEmpresa);

    const selectEmpresa = document.createElement('select');
    selectEmpresa.className = 'form-control select-empresa';
    selectEmpresa.innerHTML = '<option value="">-- Seleccione empresa --</option>';
    colEmpresa.appendChild(selectEmpresa);

    // Cargar empresas
    try {
        const respEmpresas = await ZEN_QUERY({ id: queryEmpresas, parametros: {} });
        const empresas = Array.isArray(respEmpresas.result) ? respEmpresas.result : [];
        empresas.forEach(emp => {
            const option = document.createElement('option');
            option.value = emp.valor_opcion;
            option.textContent = emp.etiqueta_opcion;
            selectEmpresa.appendChild(option);
        });
    } catch (e) {
        console.error('Error al cargar empresas:', e);
    }

    // === Columna: Centro de Costo ===
    const colCC = document.createElement('div');
    colCC.className = 'col-md-4';

    const labelCC = document.createElement('label');
    labelCC.className = 'form-label';
    labelCC.innerHTML = 'Centro de costo<span class="text-danger">*</span>';
    colCC.appendChild(labelCC);

    const selectCC = document.createElement('select');
    selectCC.className = 'form-control select-centro-costo';
    selectCC.innerHTML = '<option value="">-- Seleccione centro de costo --</option>';
    colCC.appendChild(selectCC);

    // === Columna: Monto directo ===
    const colMonto = document.createElement('div');
    colMonto.className = 'col-md-3 campo-monto-directo';

    const labelMonto = document.createElement('label');
    labelMonto.className = 'form-label';
    labelMonto.textContent = 'Monto $';
    colMonto.appendChild(labelMonto);

    const inputMonto = document.createElement('input');
    inputMonto.type = 'number';
    inputMonto.min = 0;
    inputMonto.step = 'any';
    inputMonto.className = 'form-control input-monto-directo';
    inputMonto.placeholder = 'Monto $';
    inputMonto.addEventListener('input', () => {
        actualizarTotalGeneral();
        actualizarSelectoresCC();
    });
    colMonto.appendChild(inputMonto);

    // === Columna: Eliminar ===
    const colEliminar = document.createElement('div');
    colEliminar.className = 'col-md-1 d-flex align-items-end justify-content-end';

    const btnEliminar = document.createElement('button');
    btnEliminar.className = 'btn btn-sm btn-danger';
    btnEliminar.type = 'button';
    btnEliminar.innerHTML = '<i class="fa fa-trash"></i>';
    btnEliminar.title = 'Eliminar bloque';
    btnEliminar.addEventListener('click', () => {
        bloqueWrapper.remove();
        actualizarTotalGeneral();
        actualizarSelectoresCC();
    });
    colEliminar.appendChild(btnEliminar);

    // === Contenedor distribución por CC ===
    const distribucionCC = document.createElement('div');
    distribucionCC.className = 'bloque-distribucion-cc d-none';

    const filaBotonAgregar = document.createElement('div');
    filaBotonAgregar.className = 'fila-boton-agregar d-flex justify-content-center mb-3';

    const btnAgregarLinea = document.createElement('button');
    btnAgregarLinea.className = 'btn btn-sm btn-verde-institucional';
    btnAgregarLinea.type = 'button';
    btnAgregarLinea.textContent = '+ Agregar línea de distribución';
    filaBotonAgregar.appendChild(btnAgregarLinea);

    const tablaDistribucion = document.createElement('div');
    tablaDistribucion.className = 'tabla-distribucion-cc';

    const totalDistribucion = document.createElement('div');
    totalDistribucion.className = 'mt-2';
    totalDistribucion.innerHTML = '<strong>Total: <span class="total-distribucion">$ 0</span></strong>';

    distribucionCC.appendChild(filaBotonAgregar);
    distribucionCC.appendChild(tablaDistribucion);
    distribucionCC.appendChild(totalDistribucion);

    // === Eventos ===
    selectEmpresa.addEventListener('change', async () => {
        const empresaId = selectEmpresa.value;
        selectCC.innerHTML = '<option value="">-- Seleccione centro de costo --</option>';

        if (!empresaId) {
            actualizarSelectoresCC();
            return;
        }

        try {
            const respCC = await ZEN_QUERY({
                id: queryCentrosCostos,
                parametros: { valor_padre: empresaId }
            });

            const ccList = Array.isArray(respCC.result) ? respCC.result : [];
            selectCC.innerHTML += '<option value="__DISTRIBUCION_CC__">Distribución por CC</option>';

            ccList.forEach(cc => {
                const option = document.createElement('option');
                option.value = cc.valor_opcion;
                option.textContent = cc.etiqueta_opcion;
                selectCC.appendChild(option);
            });

            actualizarSelectoresCC();
        } catch (e) {
            console.error('Error al cargar centros de costo:', e);
        }
    });

    selectCC.addEventListener('change', () => {
        if (selectCC.value === '__DISTRIBUCION_CC__') {
            distribucionCC.classList.remove('d-none');
            colMonto.classList.add('d-none');
        } else {
            distribucionCC.classList.add('d-none');
            colMonto.classList.remove('d-none');
            tablaDistribucion.innerHTML = '';
            totalDistribucion.querySelector('.total-distribucion').textContent = '$ 0';
        }
        actualizarTotalGeneral();
        actualizarSelectoresCC();
    });

    btnAgregarLinea.addEventListener('click', () => {
        const linea = document.createElement('div');
        linea.className = 'linea-distribucion row mb-2';
        linea.innerHTML = `
            <div class="col-md-7">
                <select class="form-control form-control-sm sel-cc-linea">
                    <option value="">-- Seleccione CC --</option>
                    ${Array.from(selectCC.options)
                .filter(opt => opt.value && opt.value !== '__DISTRIBUCION_CC__')
                .map(opt => `<option value="${opt.value}">${opt.textContent}</option>`)
                .join('')}
                </select>
            </div>
            <div class="col-md-3">
                <input type="number" class="form-control form-control-sm input-monto-linea" min="0" value="0" step="any" placeholder="Monto $">
            </div>
            <div class="col-md-2 text-end">
                <button class="btn btn-sm btn-danger btnEliminarLinea"><i class="fa fa-trash"></i></button>
            </div>
        `;

        tablaDistribucion.appendChild(linea);
        refrescarTotalDistribucion(distribucionCC);

        linea.querySelector('.btnEliminarLinea').addEventListener('click', () => {
            linea.remove();
            refrescarTotalDistribucion(distribucionCC);
            actualizarTotalGeneral();
            actualizarSelectoresCC();
        });

        linea.querySelectorAll('input, select').forEach(el => {
            el.addEventListener('input', () => {
                refrescarTotalDistribucion(distribucionCC);
                actualizarTotalGeneral();
                actualizarSelectoresCC();
            });
        });

        actualizarTotalGeneral();
        actualizarSelectoresCC();
    });

    // === Ensamblar ===
    bloque.appendChild(colEmpresa);
    bloque.appendChild(colCC);
    bloque.appendChild(colMonto);
    bloque.appendChild(colEliminar);
    bloque.appendChild(distribucionCC);
    bloqueWrapper.appendChild(bloque);
    contenedor.appendChild(bloqueWrapper);
}

function refrescarTotalDistribucion(bloqueDistrib) {
    const inputs = bloqueDistrib.querySelectorAll('.input-monto-linea');
    let total = 0;
    inputs.forEach(i => total += parseFloat(i.value || 0));
    const lbl = bloqueDistrib.querySelector('.total-distribucion');
    if (lbl) lbl.textContent = `$ ${total.toLocaleString('es-CL', { minimumFractionDigits: 0 })}`;
}

function actualizarTotalGeneral() {
    let totalGlobal = 0;

    document.querySelectorAll('.bloque-empresa-cc').forEach(bloque => {
        const esDistribucion = !bloque.querySelector('.bloque-distribucion-cc').classList.contains('d-none');

        if (esDistribucion) {
            bloque.querySelectorAll('.input-monto-linea').forEach(input => {
                const valor = parseFloat(input.value);
                if (!isNaN(valor)) totalGlobal += valor;
            });
        } else {
            const montoInput = bloque.querySelector('.input-monto-directo');
            if (montoInput) {
                const valor = parseFloat(montoInput.value);
                if (!isNaN(valor)) totalGlobal += valor;
            }
        }
    });

    // Buscar campo asociado a la plantilla actual
    if (window.camposMontoDistribucion) {
        Object.values(window.camposMontoDistribucion).forEach(info => {
            const inputCampo = document.getElementById(info.inputId);
            if (inputCampo) {
                inputCampo.value = totalGlobal.toFixed(0);
                inputCampo.setAttribute('readonly', 'readonly');
            }
        });
    }
}

function actualizarSelectoresCC() {
    // 1. Limpiar lista actual
    window.listaCCSolicitud = [];

    // 2. Recorrer todos los bloques de empresa activos
    const bloquesEmpresa = document.querySelectorAll('.bloque-empresa-cc');
    bloquesEmpresa.forEach(bloque => {
        const empresaSelect = bloque.querySelector('.select-empresa');
        const empresaId = empresaSelect?.value;
        const empresaTexto = empresaSelect?.selectedOptions[0]?.textContent?.trim();

        if (!empresaId || !empresaTexto) return;

        const ccSelect = bloque.querySelector('.select-centro-costo');
        const esDistribucion = ccSelect?.value === '__DISTRIBUCION_CC__';

        if (esDistribucion) {
            // Recorrer líneas internas
            const lineas = bloque.querySelectorAll('.linea-distribucion');
            lineas.forEach(linea => {
                const ccLinea = linea.querySelector('.sel-cc-linea');
                const ccId = ccLinea?.value;
                const ccTexto = ccLinea?.selectedOptions[0]?.textContent?.trim();
                if (ccId && ccTexto) {
                    window.listaCCSolicitud.push({
                        idCentroCosto: ccId,
                        idEmpresa: empresaId,
                        nombreCentro: ccTexto,
                        nombreEmpresa: empresaTexto
                    });
                }
            });
        } else {
            const ccId = ccSelect?.value;
            const ccTexto = ccSelect?.selectedOptions[0]?.textContent?.trim();
            if (ccId && ccTexto && ccId !== '__DISTRIBUCION_CC__') {
                window.listaCCSolicitud.push({
                    idCentroCosto: ccId,
                    idEmpresa: empresaId,
                    nombreCentro: ccTexto,
                    nombreEmpresa: empresaTexto
                });
            }
        }
    });

    // 3. Actualizar selects en los bloques de adjuntos
    const plantillas = Object.keys(window.selectoresCCPorPlantilla || {});
    plantillas.forEach(plantillaId => {
        const selectores = window.selectoresCCPorPlantilla[plantillaId] || [];
        selectores.forEach(select => {
            const currentVal = select.value;
            select.innerHTML = '<option value="">-- Asociar a CC --</option>';
            window.listaCCSolicitud.forEach(cc => {
                const option = document.createElement('option');
                option.value = `${cc.idCentroCosto}___${cc.idEmpresa}`;
                option.textContent = `${cc.nombreCentro} <${cc.nombreEmpresa}>`;
                if (option.value === currentVal) option.selected = true;
                select.appendChild(option);
            });
        });
    });
}

/////////////////////////////////////////////////////////////// RENDERIZADO DE CAMPOS ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// PRE-CARGAR VALORES ///////////////////////////////////////////////////////////////

async function precargarValoresEditados() {
    if (!Array.isArray(window.datosTicketEditado)) return;

    const datos = window.datosTicketEditado;

    datos.filter(d => d.tipo === 'campo_personalizado').forEach(campo => {
        const wrapper = document.querySelector(`.campo-personalizado[data-campo-id="${campo.id_campo}"]`);
        if (!wrapper) return;

        const tipoCampo = parseInt(campo.id_tipo_campo);
        const valor = campo.valor;

        if (campo.nombre_interno === 'documento_adjunto') return;

        if (tipoCampo === 1 || tipoCampo === 2 || tipoCampo === 7) {
            const input = wrapper.querySelector('input');
            if (input) input.value = valor;
        }

        if (tipoCampo === 8) {
            const select = wrapper.querySelector('select');
            if (select) select.value = valor;
        }

        if (tipoCampo === 6) {
            const textarea = wrapper.querySelector('textarea');
            if (textarea) textarea.value = valor;
        }

        if ([4, 5].includes(tipoCampo)) {
            const opciones = wrapper.querySelectorAll('input');
            opciones.forEach(op => {
                if (valor.split(',').includes(op.value)) op.checked = true;
            });
        }
    });

    const distribuciones = datos.filter(d => d.tipo === 'distribucion_cc');
    if (distribuciones.length > 0) {
        await esperarDistribucionesRenderizadas();
        const bloques = document.querySelectorAll('.bloque-empresa-cc');

        distribuciones.forEach(d => {
            const [empresa_cc, monto, porcentaje] = d.valor.split(':::');
            const [empresaId, centroCostoId] = empresa_cc.split('___');

            for (let bloque of bloques) {
                const selectEmpresa = bloque.querySelector('.select-empresa');
                if (!selectEmpresa || selectEmpresa.value !== empresaId) continue;

                const selectCC = bloque.querySelector('.select-centro-costo');

                if (selectCC && selectCC.value === centroCostoId) {
                    const inputMonto = bloque.querySelector('.input-monto-directo');
                    if (inputMonto) {
                        inputMonto.value = parseFloat(monto || 0);
                        break;
                    }
                }

                if (selectCC && selectCC.value === '__DISTRIBUCION_CC__') {
                    const tabla = bloque.querySelector('.tabla-distribucion-cc');
                    const btnAgregar = bloque.querySelector('.bloque-distribucion-cc .btn');

                    if (tabla && btnAgregar) {
                        btnAgregar.click(); // agrega línea
                        const ultima = tabla.lastElementChild;
                        const sel = ultima.querySelector('.sel-cc-linea');
                        const inp = ultima.querySelector('.input-monto-linea');

                        if (sel && inp) {
                            sel.value = centroCostoId;
                            inp.value = parseFloat(monto || 0);
                        }
                    }
                }
            }
        });

        actualizarTotalGeneral();
        actualizarSelectoresCC();
    }

    const fecha = datos.find(d => d.tipo === 'fecha_compromiso');
    if (fecha) {
        const wrapper = document.querySelector('.campo-personalizado[data-nombre-interno="fecha_compromiso"]');
        const input = wrapper?.querySelector('input[type="date"]');
        if (input) input.value = fecha.valor;
    }

    const metodo = datos.find(d => d.tipo === 'forma_pago');
    if (metodo) {
        const wrapper = document.querySelector('.campo-personalizado[data-nombre-interno="metodo_pago"]');
        const select = wrapper?.querySelector('select');
        if (select) select.value = metodo.valor;
    }
}

function esperarDistribucionesRenderizadas() {
    return new Promise(resolve => {
        const check = () => {
            const bloque = document.querySelector('.bloque-empresa-cc');
            if (bloque) resolve();
            else setTimeout(check, 100);
        };
        check();
    });
}

async function preCargarDistribucionDesdeEdicion() {
    const data = Array.isArray(window.datosTicketEditado) ? window.datosTicketEditado : [];
    const distros = data.filter(d => d.tipo === 'distribucion_cc');

    if (distros.length === 0) return;

    const grupos = {};

    for (let item of distros) {
        const [empCC, monto, porcentaje] = item.valor.split(':::');
        const [idEmpresa, idCentro] = empCC.split('___');

        if (!grupos[idEmpresa]) grupos[idEmpresa] = [];

        grupos[idEmpresa].push({
            idCentroCosto: idCentro,
            monto: parseFloat(monto),
            porcentaje: parseFloat(porcentaje),
            label: item.label,
            idEmpresa: idEmpresa
        });
    }

    const wrapperGlobal = document.querySelector('.wrapper-multi-empresas');
    if (!wrapperGlobal) return;

    for (let idEmpresa in grupos) {
        const items = grupos[idEmpresa];

        const isDistribucion = items.length > 1;

        await insertarBloqueEmpresa(wrapperGlobal);
        const bloque = wrapperGlobal.querySelectorAll('.bloque-empresa-cc');
        const ultimoBloque = bloque[bloque.length - 1];

        const selectEmpresa = ultimoBloque.querySelector('.select-empresa');
        const selectCC = ultimoBloque.querySelector('.select-centro-costo');
        const inputMonto = ultimoBloque.querySelector('.input-monto-directo');
        const divDistrib = ultimoBloque.querySelector('.bloque-distribucion-cc');
        const tablaDistrib = ultimoBloque.querySelector('.tabla-distribucion-cc');
        const totalDistrib = ultimoBloque.querySelector('.total-distribucion');

        selectEmpresa.value = idEmpresa;
        selectEmpresa.dispatchEvent(new Event('change'));

        await new Promise(r => setTimeout(r, 300));

        if (isDistribucion) {
            selectCC.value = '__DISTRIBUCION_CC__';
            selectCC.dispatchEvent(new Event('change'));

            for (let linea of items) {
                const btnAgregar = divDistrib.querySelector('.btn-verde-institucional');
                if (btnAgregar) btnAgregar.click();

                await new Promise(r => setTimeout(r, 100));

                const lineas = tablaDistrib.querySelectorAll('.linea-distribucion');
                const ultima = lineas[lineas.length - 1];

                const selCC = ultima.querySelector('select.sel-cc-linea');
                const inpMonto = ultima.querySelector('input.input-monto-linea');

                selCC.value = linea.idCentroCosto;
                selCC.dispatchEvent(new Event('change'));

                inpMonto.value = linea.monto;
                inpMonto.dispatchEvent(new Event('input'));
            }

            const total = items.reduce((acc, it) => acc + it.monto, 0);
            totalDistrib.innerText = `$${total.toLocaleString('es-CL', { minimumFractionDigits: 0 })}`;

        } else {
            const item = items[0];
            selectCC.value = item.idCentroCosto;
            selectCC.dispatchEvent(new Event('change'));

            inputMonto.value = item.monto;
            inputMonto.dispatchEvent(new Event('input'));
        }
    }

    const bloquesPrecargados = document.querySelectorAll('.bloque-empresa-cc');
    if (bloquesPrecargados.length > 1) {
        const primerBloque = bloquesPrecargados[0];
        const empresaVal = primerBloque.querySelector('.select-empresa')?.value;
        const ccVal = primerBloque.querySelector('.select-centro-costo')?.value;
        const montoVal = primerBloque.querySelector('.input-monto-directo')?.value;

        const sinDatos = !empresaVal && !ccVal && !montoVal;
        if (sinDatos) {
            primerBloque.closest('.col-12.mb-3')?.remove();
        }
    }

    actualizarTotalGeneral();
    actualizarSelectoresCC();
}

async function preCargarAdjuntosDesdeEdicion() {
    if (!Array.isArray(window.datosTicketEditado)) return;

    const adjuntos = window.datosTicketEditado.filter(item =>
        item.tipo === 'campo_personalizado' &&
        item.nombre_interno === 'documento_adjunto' &&
        item.valor?.includes(':::')
    );

    if (adjuntos.length === 0) return;

    const agrupadosPorPlantilla = {};
    adjuntos.forEach(ad => {
        const idPlantilla = ad.id_plantilla_tarea;
        if (!agrupadosPorPlantilla[idPlantilla]) {
            agrupadosPorPlantilla[idPlantilla] = [];
        }
        agrupadosPorPlantilla[idPlantilla].push(ad);
    });

    for (const [plantillaId, adjuntosPlantilla] of Object.entries(agrupadosPorPlantilla)) {
        const bloqueTarea = document.querySelector(`.bloque-tarea[data-plantilla-id="${plantillaId}"]`);
        if (!bloqueTarea) continue;

        const wrapperDinamico = bloqueTarea.querySelector('.bloque-adjuntos-dinamico');
        const wrapperSimple = bloqueTarea.querySelector('.bloque-archivos-simples');

        if (wrapperDinamico) {
            const contenedorLineas = wrapperDinamico.querySelector('[id^="contenedor_lineas_"]');
            if (!contenedorLineas) continue;

            contenedorLineas.innerHTML = '';

            for (const ad of adjuntosPlantilla) {
                const [tipoDoc, url, cc] = ad.valor.split(':::');

                const linea = document.createElement('div');
                linea.className = 'row mb-2 linea-bloque-adjunto align-items-center';
                linea.innerHTML = `
                    <div class="col-md-4">
                        <select class="form-control form-control-sm select-tipo-doc">
                            <option value="">-- Tipo de documento --</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <select class="form-control form-control-sm select-cc-asociado">
                            <option value="">-- Asociar a CC --</option>
                        </select>
                    </div>
                    <div class="col-md-3 d-flex align-items-center">
                        <a href="${url}" target="_blank" class="nombre-archivo" style="font-size: 0.85rem;">${decodeURIComponent(url.split('/').pop())}</a>
                        <input type="hidden" class="input-url-doc" value="${url}" />
                    </div>
                    <div class="col-md-1 text-end">
                        <button type="button" class="btn btn-sm btn-danger btnEliminarLinea"><i class="fa fa-trash"></i></button>
                    </div>
                `;

                contenedorLineas.appendChild(linea);

                const selTipo = linea.querySelector('.select-tipo-doc');
                const selCC = linea.querySelector('.select-cc-asociado');
                const btnEliminar = linea.querySelector('.btnEliminarLinea');

                const campoTipoDoc = window.camposPlantillaActual?.find(c =>
                    c.id_plantilla_tarea == plantillaId && c.nombre_interno === 'tipo_documento'
                );
                if (campoTipoDoc) {
                    const resp = await ZEN_QUERY({ id: queryOpcionesCampo, parametros: { id_plantilla_campo: campoTipoDoc.id } });
                    const opciones = Array.isArray(resp.result) ? resp.result : [];
                    opciones.forEach(op => {
                        const opt = document.createElement('option');
                        opt.value = op.valor_opcion;
                        opt.textContent = op.etiqueta_opcion;
                        if (op.valor_opcion === tipoDoc) opt.selected = true;
                        selTipo.appendChild(opt);
                    });
                }

                const lista = window.listaCCSolicitud || [];
                lista.forEach(ccObj => {
                    const value = `${ccObj.idCentroCosto}___${ccObj.idEmpresa}`;
                    const label = `${ccObj.nombreCentro} <${ccObj.nombreEmpresa}>`;
                    const opt = document.createElement('option');
                    opt.value = value;
                    opt.textContent = label;
                    if (value === cc) opt.selected = true;
                    selCC.appendChild(opt);
                });

                btnEliminar.addEventListener('click', () => {
                    linea.remove();
                });
            }

        } else if (wrapperSimple) {
            const contenedorLineas = wrapperSimple.querySelector('[id^="contenedor_lineas_"]');
            if (!contenedorLineas) continue;

            contenedorLineas.innerHTML = '';

            for (const ad of adjuntosPlantilla) {
                const [nombre, url, cc] = ad.valor.split(':::');

                const linea = document.createElement('div');
                linea.className = 'row mb-2 linea-bloque-archivo align-items-center';
                linea.innerHTML = `
                    <div class="col-md-4">
                        <select class="form-control form-control-sm select-cc-asociado">
                            <option value="">-- Asociar a CC --</option>
                        </select>
                    </div>
                    <div class="col-md-6 d-flex align-items-center">
                        <a href="${url}" target="_blank" class="nombre-archivo" style="font-size: 0.85rem;">${nombre}</a>
                        <input type="hidden" class="input-url-archivo" value="${url}" />
                    </div>
                    <div class="col-md-2 text-end">
                        <button type="button" class="btn btn-sm btn-danger btnEliminarLinea"><i class="fa fa-trash"></i></button>
                    </div>
                `;

                contenedorLineas.appendChild(linea);

                const selCC = linea.querySelector('.select-cc-asociado');
                const lista = window.listaCCSolicitud || [];
                lista.forEach(ccObj => {
                    const value = `${ccObj.idCentroCosto}___${ccObj.idEmpresa}`;
                    const label = `${ccObj.nombreCentro} <${ccObj.nombreEmpresa}>`;
                    const opt = document.createElement('option');
                    opt.value = value;
                    opt.textContent = label;
                    if (value === cc) opt.selected = true;
                    selCC.appendChild(opt);
                });

                linea.querySelector('.btnEliminarLinea').addEventListener('click', () => {
                    linea.remove();
                });
            }
        }
    }
}

function preCargarMetodoPagoDesdeEdicion() {
    if (!window.datosTicketEditado || !Array.isArray(window.datosTicketEditado)) return;

    const registro = window.datosTicketEditado.find(campo => campo.tipo === 'forma_pago');
    if (!registro || !registro.valor) return;

    const valor = registro.valor.toUpperCase();

    const checkExist = setInterval(() => {
        const wrapper = document.querySelector('.campo-personalizado[data-nombre-interno="metodo_pago"]');
        if (wrapper) {
            const radios = wrapper.querySelectorAll('input[type="radio"]');
            if (radios.length > 0) {
                radios.forEach(radio => {
                    if (radio.value.toUpperCase() === valor) {
                        radio.checked = true;
                    }
                });
                clearInterval(checkExist);
            }
        }
    }, 300);
}

/////////////////////////////////////////////////////////////// PRE-CARGAR VALORES ///////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////// GUARDADO DE CAMPOS ///////////////////////////////////////////////////////////////

async function guardarCambiosDesdeEdicion() {
    try {
        const camposValidos = await validarCamposPersonalizadosPrevio();
        if (!camposValidos) return;

        const distribucionesValidas = validarDistribuciones();
        if (!distribucionesValidas) return;

        const archivosValidos = await validarArchivosPrevio();
        if (!archivosValidos) return;

        const ccOk = await validarAsociacionArchivosCC();
        if (!ccOk) return;

        const confirmacion = await Swal.fire({
            title: '¿Desea guardar los cambios?',
            text: 'Esta acción sobrescribirá los datos anteriores de la solicitud.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, guardar',
            cancelButtonText: 'Cancelar'
        });

        if (!confirmacion.isConfirmed) return;

        await ZEN_QUERY({ id: queryBorrarCampos, parametros: { id_ticket: ticketEnEdicion } });
        await ZEN_QUERY({ id: queryBorrarDistribuciones, parametros: { id_ticket: ticketEnEdicion } });

        const guardadoExitoso = await guardarCamposTicket(ticketEnEdicion);
        if (!guardadoExitoso) return;

        const wrapperFecha = document.querySelector('.campo-personalizado[data-nombre-interno="fecha_compromiso"]');
        const inputFecha = wrapperFecha?.querySelector('input[type="date"]');
        const fechaValor = inputFecha?.value?.trim() || '';

        if (fechaValor) {
            await ZEN_QUERY({
                id: queryActualizarFechaPago,
                parametros: {
                    ticket_id: ticketEnEdicion,
                    usuario_id: idUsuario,
                    fecha: fechaValor
                }
            });
        }

        const wrapperMetodo = document.querySelector('.campo-personalizado[data-nombre-interno="metodo_pago"]');
        const metodoSeleccionado = wrapperMetodo?.querySelector('input[type="radio"]:checked')?.value?.trim() || '';

        if (metodoSeleccionado) {
            await ZEN_QUERY({
                id: queryModificarFormaPago,
                parametros: {
                    forma_pago: metodoSeleccionado,
                    id: ticketEnEdicion
                }
            });
        }

        await Swal.fire({
            icon: 'success',
            title: 'Cambios guardados',
            text: 'La solicitud ha sido actualizada correctamente.'
        });

        window.location.reload();

    } catch (error) {
        console.error('[guardarCambiosDesdeEdicion] Error:', error);
        Swal.fire({ icon: 'error', title: 'Error', text: 'Ocurrió un error al guardar los cambios.' });
    }
}

async function guardarCamposTicket(id_mensaje_ticket) {
    try {
        if (!validarDistribuciones()) return false;
        if (!validarAsociacionArchivosCC()) return false;

        const bloques = document.querySelectorAll('#listaCamposTicket .bloque-tarea');

        for (let bloque of bloques) {
            const wrappers = bloque.querySelectorAll('.campo-personalizado');

            for (let wrapper of wrappers) {
                const campoId = wrapper.getAttribute('data-campo-id');
                const obligatorio = wrapper.getAttribute('data-obligatorio');
                const nombreInterno = wrapper.getAttribute('data-nombre-interno') || '';
                let value = '';

                // Bloques especiales
                if (nombreInterno === 'documento_adjunto_dinamico') {
                    const lineas = wrapper.querySelectorAll('.linea-bloque-adjunto');
                    for (let i = 0; i < lineas.length; i++) {
                        const tipo = lineas[i].querySelector('.select-tipo-doc')?.value?.trim() || '';
                        const archivo = lineas[i].querySelector('.input-url-doc')?.value?.trim() || '';
                        const cc = lineas[i].querySelector('.select-cc-asociado')?.value?.trim() || '';

                        if (!tipo && !archivo && !cc) continue;

                        if (!tipo || !archivo || !cc) {
                            await Swal.fire({
                                icon: 'error',
                                title: 'Línea incompleta',
                                text: !tipo ? 'Debe seleccionar un tipo de documento.'
                                    : !archivo ? 'Debe subir un archivo.'
                                        : 'Debe asociar el documento a un centro de costo.'
                            });
                            return false;
                        }

                        if (tipo.includes(':::') || archivo.includes(':::') || cc.includes(':::')) {
                            await Swal.fire({ icon: 'error', title: 'Error interno', text: 'Formato no permitido en tipo, archivo o centro de costo.' });
                            return false;
                        }

                        const valor = `${tipo}:::${archivo}:::${cc}`;

                        const resp = await ZEN_QUERY({
                            id: queryInsertarCampoTarea,
                            parametros: {
                                id_tarea_servicio: id_mensaje_ticket,
                                id_campo: campoId,
                                valor: valor
                            }
                        });

                        if (!resp?.accion) {
                            await Swal.fire({ icon: 'error', title: 'Error al guardar', text: `No se pudo guardar el documento en la línea ${i + 1}.` });
                            return false;
                        }
                    }
                    continue;
                }

                if (wrapper.classList.contains('bloque-archivos-simples')) {
                    const lineas = wrapper.querySelectorAll('.linea-bloque-archivo');
                    for (let i = 0; i < lineas.length; i++) {
                        const url = lineas[i].querySelector('.input-url-archivo')?.value?.trim() || '';
                        const nombre = lineas[i].querySelector('.nombre-archivo')?.textContent?.trim() || '';
                        const cc = lineas[i].querySelector('.select-cc-asociado')?.value?.trim() || '';

                        if (!url && !nombre && !cc) continue;

                        if (!url || !nombre || !cc) {
                            await Swal.fire({
                                icon: 'error',
                                title: 'Línea incompleta',
                                text: !nombre ? 'Debe indicar un nombre de archivo.'
                                    : !url ? 'Debe subir un archivo.'
                                        : 'Debe asociar el archivo a un centro de costo.'
                            });
                            return false;
                        }

                        if (nombre.includes(':::') || url.includes(':::') || cc.includes(':::')) {
                            await Swal.fire({ icon: 'error', title: 'Error interno', text: 'Formato no permitido en nombre, archivo o centro de costo.' });
                            return false;
                        }

                        const valor = `${nombre}:::${url}:::${cc}`;

                        const resp = await ZEN_QUERY({
                            id: queryInsertarCampoTarea,
                            parametros: {
                                id_tarea_servicio: id_mensaje_ticket,
                                id_campo: campoId,
                                valor: valor
                            }
                        });

                        if (!resp?.accion) {
                            await Swal.fire({ icon: 'error', title: 'Error al guardar', text: `No se pudo guardar el archivo en la línea ${i + 1}.` });
                            return false;
                        }
                    }
                    continue;
                }

                // Inputs generales
                const checkboxEls = wrapper.querySelectorAll('input[type="checkbox"]');
                if (checkboxEls.length > 0) {
                    value = Array.from(checkboxEls).filter(chk => chk.checked).map(chk => chk.value).join(',');
                } else {
                    const radioEl = wrapper.querySelector('input[type="radio"]:checked');
                    if (radioEl) {
                        value = radioEl.value;
                    } else {
                        const inputEl = wrapper.querySelector('input, select, textarea');
                        if (inputEl) value = inputEl.value;
                    }
                }

                // Validación obligatorios
                if (obligatorio === "1" && (!value || value.trim() === "")) {
                    const labelText = wrapper.querySelector('label')?.innerText || 'Campo sin nombre';
                    await Swal.fire({ icon: 'error', title: 'Campo obligatorio', text: `El campo ${labelText} es obligatorio.` });
                    return false;
                }

                // Manejo especial: fecha_compromiso
                if (nombreInterno === 'fecha_compromiso') {
                    if (!value.trim()) continue;

                    const restId = window.modoEdicion ? queryActualizarFechaPago : queryNuevaFechaCriticidad;

                    const resp = await ZEN_QUERY({
                        id: restId,
                        parametros: {
                            ticket_id: id_mensaje_ticket,
                            usuario_id: idUsuario,
                            fecha: value,
                            ...(restId === queryNuevaFechaCriticidad ? { tipo_fecha: 1 } : {})
                        }
                    });

                    if (!resp?.accion) {
                        await Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo guardar la fecha de compromiso.' });
                        return false;
                    }

                    continue;
                }


                // Manejo especial: metodo_pago
                if (nombreInterno === 'metodo_pago') {
                    if (!value.trim()) continue;
                    const resp = await ZEN_QUERY({
                        id: queryModificarFormaPago,
                        parametros: {
                            forma_pago: value,
                            id: id_mensaje_ticket
                        }
                    });
                    if (!resp?.accion) {
                        await Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo guardar el método de pago.' });
                        return false;
                    }
                    continue;
                }

                // Guardado general
                const params = {
                    id_tarea_servicio: id_mensaje_ticket,
                    id_campo: campoId,
                    valor: value
                };

                await ZEN_QUERY({ id: queryInsertarCampoTarea, parametros: params });
            }
        }

        await guardarDistribuciones(id_mensaje_ticket);
        return true;

    } catch (error) {
        console.error('[guardarCamposTicket] Error inesperado:', error);
        await Swal.fire({ icon: 'error', title: 'Error', text: 'Error al guardar campos del ticket.' });
        return false;
    }
}

function validarDistribuciones() {
    const bloquesDistrib = document.querySelectorAll('.bloque-distribucion-cc');

    for (let bloque of bloquesDistrib) {
        if (bloque.style.display !== 'none') {
            if (!bloque.id || !bloque.id.startsWith('bloqueDistribucion_')) {
                console.warn('[validarDistribuciones] Bloque sin ID válido:', bloque);
                continue;
            }

            const tablaId = bloque.id.replace('bloqueDistribucion_', 'tablaDistribucion_');
            const totalId = bloque.id.replace('bloqueDistribucion_', 'totalDistribucion_');

            const tabla = document.getElementById(tablaId);
            const totalSpan = document.getElementById(totalId);

            if (!tabla || !totalSpan) {
                console.warn(`[validarDistribuciones] No se encontraron elementos esperados: ${tablaId} o ${totalId}`);
                continue;
            }

            // Obtener monto total desde texto
            const totalStr = totalSpan.innerText.replace(/[$\s,.]/g, '');
            const totalMonto = parseFloat(totalStr) || 0;

            // Obtener input monto original (asociado a plantilla)
            const bloqueTarea = bloque.closest('.bloque-tarea');
            const plantillaIdMatch = bloqueTarea?.getAttribute('data-plantilla-id');

            if (!plantillaIdMatch || !window.camposMontoDistribucion || !window.camposMontoDistribucion[plantillaIdMatch]) {
                continue;
            }

            const campoInfo = window.camposMontoDistribucion[plantillaIdMatch];
            const inputMonto = document.getElementById(campoInfo.inputId);
        }
    }

    return true;
}

async function guardarDistribuciones(id_mensaje_ticket) {
    const bloques = document.querySelectorAll('.bloque-empresa-cc');

    for (let bloque of bloques) {
        const empresaSelect = bloque.querySelector('.select-empresa');
        const ccSelect = bloque.querySelector('.select-centro-costo');

        const idEmpresa = empresaSelect?.value;
        const tipoCC = ccSelect?.value;

        if (!idEmpresa || !tipoCC) continue;

        const esDistribucion = tipoCC === '__DISTRIBUCION_CC__';

        if (esDistribucion) {
            const lineas = bloque.querySelectorAll('.tabla-distribucion-cc .linea-distribucion');

            let totalMonto = 0;
            const lineasValidas = [];

            lineas.forEach(linea => {
                const selCC = linea.querySelector('select.sel-cc-linea');
                const inpMonto = linea.querySelector('input.input-monto-linea');
                const idCentroCosto = selCC?.value;
                const monto = parseFloat(inpMonto?.value || 0);

                if (idCentroCosto && monto > 0) {
                    totalMonto += monto;
                    lineasValidas.push({ idCentroCosto, monto });
                }
            });

            for (let linea of lineasValidas) {
                const porcentaje = ((linea.monto / totalMonto) * 100).toFixed(2);
                const params = {
                    id_tarea_servicio: id_mensaje_ticket,
                    id_empresa: idEmpresa,
                    id_centro_costo: linea.idCentroCosto,
                    monto: linea.monto,
                    porcentaje: porcentaje
                };
                await ZEN_QUERY({ id: queryInsertarDistribucion, parametros: params });
            }

        } else {
            const montoInput = bloque.querySelector('.input-monto-directo');
            const monto = parseFloat(montoInput?.value || 0);
            if (monto > 0) {
                const params = {
                    id_tarea_servicio: id_mensaje_ticket,
                    id_empresa: idEmpresa,
                    id_centro_costo: tipoCC,
                    monto: monto,
                    porcentaje: 100
                };
                await ZEN_QUERY({ id: queryInsertarDistribucion, parametros: params });
            }
        }
    }
}

async function validarCamposPersonalizadosPrevio() {
    try {
        const bloques = document.querySelectorAll('#listaCamposTicket .bloque-tarea');
        for (let bloque of bloques) {
            const wrappers = bloque.querySelectorAll('.campo-personalizado');
            for (let wrapper of wrappers) {
                const obligatorio = wrapper.getAttribute('data-obligatorio');
                let value = '';
                const checkboxEls = wrapper.querySelectorAll('input[type="checkbox"]');
                if (checkboxEls.length > 0) {
                    const checkedValues = Array.from(checkboxEls).filter(chk => chk.checked).map(chk => chk.value);
                    value = checkedValues.join(',');
                } else {
                    const radioEl = wrapper.querySelector('input[type="radio"]:checked');
                    if (radioEl) {
                        value = radioEl.value;
                    } else {
                        const hiddenFileInput = wrapper.querySelector('input[type="hidden"]');
                        if (hiddenFileInput && hiddenFileInput.id.includes('id_upload_subirArchivo')) {
                            value = hiddenFileInput.value;
                        } else {
                            const inputEl = wrapper.querySelector('input, select, textarea');
                            if (inputEl) {
                                value = inputEl.value;
                            }
                        }
                    }
                }

                if (obligatorio === "1" && (!value || value.trim() === "")) {
                    const labelText = wrapper.querySelector('label').innerText;
                    Swal.fire({ icon: 'error', title: 'Campo obligatorio', text: `El campo ${labelText} es obligatorio.` });
                    return false;
                }
            }
        }
        return true;
    } catch (error) {
        return false;
    }
}

async function validarArchivosPrevio() {
    let errores = [];

    const bloquesSimples = document.querySelectorAll('.bloque-archivo-simple');
    bloquesSimples.forEach(bloque => {
        const inputs = bloque.querySelectorAll('input[type="file"]');
        const obligatorio = bloque.closest('.campo-personalizado')?.getAttribute('data-obligatorio') === '1';

        if (obligatorio && inputs.length === 0) {
            errores.push('Debe adjuntar al menos un archivo en los campos requeridos.');
        }

        inputs.forEach(input => {
            if (!input.files || input.files.length === 0) {
                errores.push('Hay archivos requeridos que no han sido seleccionados.');
            }
        });
    });

    const bloquesDinamicos = document.querySelectorAll('.bloque-archivo-dinamico');
    bloquesDinamicos.forEach(bloque => {
        const filas = bloque.querySelectorAll('.fila-adjunto');
        const obligatorio = bloque.closest('.campo-personalizado')?.getAttribute('data-obligatorio') === '1';

        if (obligatorio && filas.length === 0) {
            errores.push('Debe agregar al menos un documento en los campos requeridos.');
        }

        filas.forEach(fila => {
            const tipo = fila.querySelector('select');
            const archivo = fila.querySelector('input[type="file"]');

            if (!tipo || !tipo.value) {
                errores.push('Debe seleccionar un tipo de documento en una de las filas.');
            }

            if (!archivo || archivo.files.length === 0) {
                errores.push('Debe adjuntar el archivo correspondiente en una de las filas.');
            }
        });
    });

    if (errores.length > 0) {
        Swal.fire({
            icon: 'error',
            title: 'Validación de archivos',
            html: errores.map(e => `<p>${e}</p>`).join(''),
        });
        return false;
    }

    return true;
}

async function validarAsociacionArchivosCC() {
    const tipoSolicitud = parseInt(ZEN_DATABEAN.id_tipo_trabajo || '0');

    if (tipoSolicitud === 34) return true;

    const lista = Array.isArray(window.listaCCSolicitud) ? window.listaCCSolicitud : [];
    if (lista.length === 0) return true;

    const mapaCC = new Map();

    lista.forEach(cc => {
        const clave = `${cc.idCentroCosto}___${cc.idEmpresa}`;
        mapaCC.set(clave, 0);
    });

    const bloquesDinamicos = document.querySelectorAll('.bloque-adjuntos-dinamico');
    bloquesDinamicos.forEach(bloque => {
        const lineas = bloque.querySelectorAll('.linea-bloque-adjunto');
        lineas.forEach(linea => {
            const cc = linea.querySelector('.select-cc-asociado')?.value?.trim() || '';
            const archivo = linea.querySelector('.input-url-doc')?.value?.trim() || '';
            if (cc && archivo && mapaCC.has(cc)) {
                mapaCC.set(cc, mapaCC.get(cc) + 1);
            }
        });
    });

    const bloquesSimples = document.querySelectorAll('.bloque-archivos-simples');
    bloquesSimples.forEach(bloque => {
        const lineas = bloque.querySelectorAll('.linea-bloque-archivo');
        lineas.forEach(linea => {
            const cc = linea.querySelector('.select-cc-asociado')?.value?.trim() || '';
            const archivo = linea.querySelector('.input-url-archivo')?.value?.trim() || '';
            if (cc && archivo && mapaCC.has(cc)) {
                mapaCC.set(cc, mapaCC.get(cc) + 1);
            }
        });
    });

    const faltantes = [];
    mapaCC.forEach((cantidad, clave) => {
        if (cantidad === 0) {
            const [idCentro, idEmpresa] = clave.split('___');
            const ccObj = lista.find(item => item.idCentroCosto === idCentro && item.idEmpresa === idEmpresa);
            if (ccObj) {
                faltantes.push(`${ccObj.nombreCentro} <${ccObj.nombreEmpresa}>`);
            }
        }
    });

    if (faltantes.length > 0) {
        Swal.fire({
            icon: 'error',
            title: 'Archivos requeridos',
            html: `Debe asociar al menos un archivo a cada centro de costo:<br/><br/>${faltantes.map(f => `<li>${f}</li>`).join('')}`
        });
        return false;
    }

    return true;
}

/////////////////////////////////////////////////////////////// GUARDADO DE CAMPOS ///////////////////////////////////////////////////////////////
